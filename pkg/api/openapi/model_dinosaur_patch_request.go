/*
rh-trex API

rh-trex API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DinosaurPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DinosaurPatchRequest{}

// DinosaurPatchRequest struct for DinosaurPatchRequest
type DinosaurPatchRequest struct {
	Species *string `json:"species,omitempty"`
}

// NewDinosaurPatchRequest instantiates a new DinosaurPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDinosaurPatchRequest() *DinosaurPatchRequest {
	this := DinosaurPatchRequest{}
	return &this
}

// NewDinosaurPatchRequestWithDefaults instantiates a new DinosaurPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDinosaurPatchRequestWithDefaults() *DinosaurPatchRequest {
	this := DinosaurPatchRequest{}
	return &this
}

// GetSpecies returns the Species field value if set, zero value otherwise.
func (o *DinosaurPatchRequest) GetSpecies() string {
	if o == nil || IsNil(o.Species) {
		var ret string
		return ret
	}
	return *o.Species
}

// GetSpeciesOk returns a tuple with the Species field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DinosaurPatchRequest) GetSpeciesOk() (*string, bool) {
	if o == nil || IsNil(o.Species) {
		return nil, false
	}
	return o.Species, true
}

// HasSpecies returns a boolean if a field has been set.
func (o *DinosaurPatchRequest) HasSpecies() bool {
	if o != nil && !IsNil(o.Species) {
		return true
	}

	return false
}

// SetSpecies gets a reference to the given string and assigns it to the Species field.
func (o *DinosaurPatchRequest) SetSpecies(v string) {
	o.Species = &v
}

func (o DinosaurPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DinosaurPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Species) {
		toSerialize["species"] = o.Species
	}
	return toSerialize, nil
}

type NullableDinosaurPatchRequest struct {
	value *DinosaurPatchRequest
	isSet bool
}

func (v NullableDinosaurPatchRequest) Get() *DinosaurPatchRequest {
	return v.value
}

func (v *NullableDinosaurPatchRequest) Set(val *DinosaurPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDinosaurPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDinosaurPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDinosaurPatchRequest(val *DinosaurPatchRequest) *NullableDinosaurPatchRequest {
	return &NullableDinosaurPatchRequest{value: val, isSet: true}
}

func (v NullableDinosaurPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDinosaurPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
