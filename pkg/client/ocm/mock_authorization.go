// Code generated by MockGen. DO NOT EDIT.
// Source: authorization.go
//
// Generated by this command:
//
//	mockgen -source=authorization.go -package=ocm -destination=mock_authorization.go
//
// Package ocm is a generated GoMock package.
package ocm

import (
	context "context"
	reflect "reflect"

	v1 "github.com/openshift-online/ocm-sdk-go/authorizations/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockOCMAuthorization is a mock of OCMAuthorization interface.
type MockOCMAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockOCMAuthorizationMockRecorder
}

// MockOCMAuthorizationMockRecorder is the mock recorder for MockOCMAuthorization.
type MockOCMAuthorizationMockRecorder struct {
	mock *MockOCMAuthorization
}

// NewMockOCMAuthorization creates a new mock instance.
func NewMockOCMAuthorization(ctrl *gomock.Controller) *MockOCMAuthorization {
	mock := &MockOCMAuthorization{ctrl: ctrl}
	mock.recorder = &MockOCMAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCMAuthorization) EXPECT() *MockOCMAuthorizationMockRecorder {
	return m.recorder
}

// AccessReview mocks base method.
func (m *MockOCMAuthorization) AccessReview(ctx context.Context, username, action, resourceType, organizationID, subscriptionID, clusterID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessReview", ctx, username, action, resourceType, organizationID, subscriptionID, clusterID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessReview indicates an expected call of AccessReview.
func (mr *MockOCMAuthorizationMockRecorder) AccessReview(ctx, username, action, resourceType, organizationID, subscriptionID, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessReview", reflect.TypeOf((*MockOCMAuthorization)(nil).AccessReview), ctx, username, action, resourceType, organizationID, subscriptionID, clusterID)
}

// ResourceReview mocks base method.
func (m *MockOCMAuthorization) ResourceReview(ctx context.Context, username, action, resource string) (*v1.ResourceReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceReview", ctx, username, action, resource)
	ret0, _ := ret[0].(*v1.ResourceReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceReview indicates an expected call of ResourceReview.
func (mr *MockOCMAuthorizationMockRecorder) ResourceReview(ctx, username, action, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceReview", reflect.TypeOf((*MockOCMAuthorization)(nil).ResourceReview), ctx, username, action, resource)
}

// SelfAccessReview mocks base method.
func (m *MockOCMAuthorization) SelfAccessReview(ctx context.Context, action, resourceType, organizationID, subscriptionID, clusterID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfAccessReview", ctx, action, resourceType, organizationID, subscriptionID, clusterID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelfAccessReview indicates an expected call of SelfAccessReview.
func (mr *MockOCMAuthorizationMockRecorder) SelfAccessReview(ctx, action, resourceType, organizationID, subscriptionID, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfAccessReview", reflect.TypeOf((*MockOCMAuthorization)(nil).SelfAccessReview), ctx, action, resourceType, organizationID, subscriptionID, clusterID)
}
