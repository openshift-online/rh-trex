openapi: 3.0.0
info:
  title: rh-trex Service API
  description: rh-trex Service API
  version: 0.0.1
servers:
  - url: http://localhost:8000
    description: current domain
  - url: https://api.openshift.com
    description: Main (production) server
  - url: https://api.stage.openshift.com
    description: Staging server
paths:
  /api/rh-trex/v1/dinosaurs:
    $ref: 'openapi.dinosaurs.yaml#/paths/~1api~1rh-trex~1v1~1dinosaurs'
  /api/rh-trex/v1/dinosaurs/{id}:
    $ref: 'openapi.dinosaurs.yaml#/paths/~1api~1rh-trex~1v1~1dinosaurs~1{id}'
  /api/rh-trex/v1/subscriptions:
    $ref: 'openapi.subscriptions.yaml#/paths/~1api~1rh-trex~1v1~1subscriptions'
  /api/rh-trex/v1/subscriptions/{id}:
    $ref: 'openapi.subscriptions.yaml#/paths/~1api~1rh-trex~1v1~1subscriptions~1{id}'
  # AUTO-ADD NEW PATHS
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
        - kind
        - page
        - size
        - total
        - items
    Error:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            code:
              type: string
            reason:
              type: string
            operation_id:
              type: string
    ErrorList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Error'
    Dinosaur:
      $ref: 'openapi.dinosaurs.yaml#/components/schemas/Dinosaur'
    DinosaurList:
      $ref: 'openapi.dinosaurs.yaml#/components/schemas/DinosaurList'
    DinosaurPatchRequest:
      $ref: 'openapi.dinosaurs.yaml#/components/schemas/DinosaurPatchRequest'
    Subscription:
      $ref: 'openapi.subscriptions.yaml#/components/schemas/Subscription'
    SubscriptionList:
      $ref: 'openapi.subscriptions.yaml#/components/schemas/SubscriptionList'
    SubscriptionPatchRequest:
      $ref: 'openapi.subscriptions.yaml#/components/schemas/SubscriptionPatchRequest'
    # AUTO-ADD NEW SCHEMAS
  parameters:
    id:
      name: id
      in: path
      description: The id of record
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: Page number of record list when record list exceeds specified page size
      schema:
        type: integer
        default: 1
        minimum: 1
      required: false
    size:
      name: size
      in: query
      description: Maximum number of records to return
      schema:
        type: integer
        default: 100
        minimum: 0
      required: false
    search:
      name: search
      in: query
      required: false
      description: |-
        Specifies the search criteria. The syntax of this parameter is
        similar to the syntax of the _where_ clause of an SQL statement,
        using the names of the json attributes / column names of the account. 
        For example, in order to retrieve all the accounts with a username
        starting with `my`:

        ```sql
        username like 'my%'
        ```

        The search criteria can also be applied on related resource.
        For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

        ```sql
        subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
        ```

        If the parameter isn't provided, or if the value is empty, then
        all the accounts that the user has permission to see will be
        returned.
      schema:
        type: string
    orderBy:
      name: orderBy
      in: query
      required: false
      description: |-
        Specifies the order by criteria. The syntax of this parameter is
        similar to the syntax of the _order by_ clause of an SQL statement,
        but using the names of the json attributes / column of the account.
        For example, in order to retrieve all accounts ordered by username:

        ```sql
        username asc
        ```

        Or in order to retrieve all accounts ordered by username _and_ first name:

        ```sql
        username asc, firstName asc
        ```

        If the parameter isn't provided, or if the value is empty, then
        no explicit ordering will be applied.
      schema:
        type: string
    fields:
      name: fields
      in: query
      required: false
      description: |-
        Supplies a comma-separated list of fields to be returned.
        Fields of sub-structures and of arrays use <structure>.<field> notation.
        <stucture>.* means all field of a structure
        Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)

        ```
        ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
        ```
      schema:
        type: string
