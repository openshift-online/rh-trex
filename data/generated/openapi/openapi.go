// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.dinosaurs.yaml
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiDinosaursYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\xb9\x11\x7f\xf7\xa7\x18\xe0\x5a\xe8\xee\x20\x59\x4e\x9b\x3e\x54\x88\x0f\x70\x2e\x4e\x9b\xc2\xb1\x53\xdb\x69\x1f\x8a\xc2\x1e\x91\xb3\x5a\xc6\xbb\xe4\x86\xc3\xb5\xb5\x69\xfb\xdd\x0b\x92\xfa\xb3\x2b\xad\xf5\x27\xb1\x50\xa5\xf0\x53\x2c\x72\x66\x38\x3f\xce\xcc\x8f\x43\x6e\x0a\x74\x29\x0f\x0e\x00\x7e\x80\xf3\xd3\xbf\xc3\xe9\xf9\x9b\x0f\x17\xef\xce\xaf\xe1\xea\xfa\xe4\xf2\xfa\x00\xa0\x8f\x85\xea\xdb\xb4\xe7\x2c\x8d\xfb\xf7\x2f\xfa\x52\x69\xc3\x58\xda\x36\x9d\xd3\xf3\x37\x07\x00\x00\x23\x72\x83\xf0\x07\x00\x97\x79\x8e\xb6\x1a\xc0\x25\xb9\xd2\x6a\x06\x84\x4c\xb1\x03\x93\xc0\xcc\xd2\x54\x94\x44\x69\x95\xab\xa6\xaa\x00\x3d\x78\x4d\x68\xc9\x0e\xe0\x1f\xff\x9c\x0c\x5a\xe2\xc2\x68\x26\x9e\x4b\x75\x7e\x77\x74\xd4\x99\xff\x04\x90\xc4\xc2\xaa\xc2\x29\xa3\x07\x70\x02\x7f\xb9\xba\x38\x07\xb4\x16\xab\xfa\xaa\x60\x86\x9f\x48\x38\xae\xe9\x09\xa3\x1d\x69\x57\x37\x05\x80\x45\x91\x29\x81\xde\x58\xff\x13\x1b\xdd\x9c\x05\x60\x91\x52\x8e\x8b\xa3\x00\xbf\xb1\x94\x0c\xa0\xf3\x43\x5f\x98\xbc\x30\x9a\xb4\xe3\x7e\x94\xe5\xfe\x9b\x89\x0f\x67\x8a\x5d\x67\x8e\xe3\xe5\xd1\x8b\x15\x38\x4a\x97\x82\x33\x77\xa4\x41\x31\x28\x7d\x8f\x99\x92\x3b\x76\xde\x14\xa4\xb1\x50\x87\x15\xe6\x59\x2b\x90\x53\x6b\x8d\x6d\x20\xf8\xfd\xe3\x08\x3e\x6a\x2c\x5d\x6a\xac\xfa\x42\x12\x9c\x81\x82\x6c\x62\x6c\x0e\xa6\x20\x1b\x5c\xdc\x37\x34\x7f\x58\x95\x57\x1f\x35\x8d\x0b\x12\x8e\x24\x90\xd7\x03\x23\x44\x69\x2d\xed\x57\x4c\x0a\xb4\x98\x93\x23\xcb\xf5\xaa\x6a\xcb\xcd\xb9\x64\xbf\xc0\x11\x75\x36\x17\x67\xf5\x65\x2b\x71\x42\x2b\xd2\x2d\x14\x8c\x95\x64\x5f\x57\x5b\x68\x24\x8a\x32\xc9\x51\xa1\x30\xbc\x4c\x46\xbf\x5a\x42\x47\x80\xa0\xe9\x61\xc6\x08\xdb\xd1\xd0\xe7\x92\xd8\xbd\x36\xb2\x26\xd7\xc8\x8f\x69\x8d\x83\x44\x87\x33\x11\xaf\xa7\x2c\xc9\x01\x38\x5b\xd2\xc1\x8a\x44\x59\x9d\x26\xed\x49\xb2\x09\xe7\x74\x56\x12\xe9\x0a\x02\x8a\x7b\xb6\xeb\xf4\xde\xc8\xf7\xc0\x34\x2b\x6a\xf3\x6f\x9e\x1b\x83\x0b\xb1\x36\x79\x3f\x8b\xf3\x99\xf2\xf7\x8e\xf2\x5f\x1e\xfd\xf1\x71\x34\xb3\x92\xc6\xcc\x12\xca\x0a\x68\xac\x78\xe7\x1d\xc4\xd3\x1e\x5b\x27\x1a\xca\xc7\x4e\x2e\x10\xbe\xc4\x95\x1e\x81\x4b\x69\x91\x16\xff\xf7\xf0\xb6\x6d\x50\xfb\xff\x52\xf2\x3f\x5b\x76\xa9\x7f\x22\x07\xa8\xe7\x4d\xe2\xb0\x82\x59\xc9\xed\xa6\x3f\x9d\x25\x55\x62\x4a\x2d\x1b\x0b\xee\x6a\xcb\x37\xe7\xd8\x67\x72\xda\x2f\x34\x2f\x1f\x47\x73\x6e\xe6\x59\xfb\xa0\x5c\x0a\x5c\x90\x50\x89\x22\x09\x4a\x7e\x8f\x4c\xf5\x3d\x34\xd8\x05\x3a\x91\x2e\x91\xc8\xc7\x42\x86\xee\x52\xef\xa8\xb5\x8c\xf6\xe5\x3c\xde\x7b\xd6\x62\x7e\xf0\xbb\x72\x19\x61\xac\x6e\x37\x37\xe1\xc5\x72\x82\x96\x4b\x21\x88\x39\x29\xb3\xac\xda\x1b\x82\x7c\x6e\x42\xf7\x04\xc1\x33\xcf\xef\x31\xcf\xff\xdf\x77\xd5\x4b\x67\x55\x20\x2d\xdf\x49\xef\x5d\x17\xdd\xf6\x26\xb4\xf6\x41\x45\xc9\xce\xc1\x7c\xc6\xab\x4d\xec\x46\x0b\xb1\xc1\xbe\xfa\xf5\xcf\xa7\xef\x4f\x66\x7d\x39\xcc\x22\xdb\x22\x34\xed\xc1\x01\x30\xcb\x2e\x92\x96\xc7\xa9\xb5\x88\x2e\xc2\xfb\xed\x25\x25\x64\x49\x8b\xc6\x0b\x94\xab\x0a\x1a\x4c\x1e\x78\x6b\x3b\x56\x58\x5f\xf2\x4e\xd5\x0f\xa1\xb0\xb7\xbe\x82\x16\x07\x61\x62\x85\x9d\x55\x7a\xd4\x98\x12\xf1\x25\xe4\x06\xdd\xc6\x2a\x00\x9e\x72\xd0\x0d\xfc\x59\x4d\x3d\xa7\x72\x6a\xcc\x4f\x0e\xb9\xa7\x30\xb9\x26\x18\x67\x6a\xfa\x1e\xf6\xd4\x01\x69\xbe\x66\x6f\x1d\x05\xe5\x28\x7f\x24\x06\xe1\xf1\x7e\x61\xa6\x55\x7c\x9b\x13\x7c\xcd\x3e\xd5\x9b\x98\x95\xfb\xd5\x02\xb3\x0d\x62\x4b\x92\x2d\x84\x76\xb9\x2e\x95\x9c\x8b\x6b\xcc\x69\x50\xbf\x1b\x2a\x3d\xf0\xfd\x67\xda\xde\x23\x5e\xa7\xe4\xcf\x03\x93\x80\x25\x61\xac\x5c\xd7\x1e\x2e\xf3\x4b\x4b\xe2\x15\x38\xa2\x45\x8f\xfc\x58\xc3\xa7\xcf\x25\xd9\xaa\xdd\xa9\x0f\x38\x22\xd0\x65\x3e\x24\x3b\xf7\x2c\x7e\x0f\x7a\x48\x49\x37\x06\x68\x2c\x88\x24\xd7\x8e\x37\xbf\x12\xb0\xfa\xb2\xde\x69\xa5\x1d\x8d\xc8\x36\xd8\x3a\xc1\x32\x73\x03\x78\x51\x1b\xcc\x95\x56\x79\x99\xd7\x07\xe7\xbb\x93\x60\xc6\xd3\x95\xfc\xa2\x8b\xb8\x1b\x8e\xac\xc1\xfd\x1e\xc7\x7e\xa1\x25\xe8\xec\xdb\x11\x1b\x3e\x8c\x7d\x13\xa6\xa3\xa3\x36\x54\x47\xeb\x50\x85\x87\xf8\x25\x5c\x61\x74\x05\xb2\x76\x63\x0b\x88\xff\xdd\xab\x79\x74\x35\x09\x21\x87\x77\xa5\xb8\x00\x08\xab\x1c\x59\x85\x87\x21\x55\xb9\xd2\x0e\xc7\x7e\x67\x5c\xaa\x78\x5e\x0a\xa0\xea\x8d\x00\xab\x5c\x65\x68\xfd\xae\xb9\x05\x25\x82\x9b\x87\x94\x2c\xdd\x80\xc8\xb0\x64\xf2\xa3\xa8\xe1\xea\xaf\x67\xc0\x0e\x1d\xe5\xa4\x5d\xb7\x66\xaa\xe4\xe9\x3b\x97\x87\xcd\x53\x23\xfe\xe8\x05\x74\xce\xaa\x61\xe9\x88\xa1\x0f\xc2\x64\x65\xae\x9b\x52\x28\x84\x29\xb5\x3b\xac\xd9\x7b\x6b\x2c\xd0\x18\xf3\x22\xa3\x2e\x28\x0d\xe1\xa3\xc5\x24\xbc\x56\xd1\x3d\x79\x5e\xad\x2b\x73\xec\xde\x10\x4a\x26\xeb\xad\xd7\x71\x3a\xb4\xa1\x7b\x08\x22\xb7\x79\x75\x3b\x38\xa8\x4d\xdf\xde\xde\xf2\xe7\xac\x01\x26\x9a\x80\x4c\xdd\x11\x74\xf2\xea\xb7\x9d\xa6\x78\x5d\xfb\x7a\x39\x06\x20\x50\x03\x66\x6c\x60\x48\xb1\x13\x21\x09\xc6\xd7\x63\x16\xae\x5e\x96\xd8\x94\x56\xd0\xd7\x01\xe6\x72\x38\xcb\x0c\x86\x0c\x87\x94\x51\x78\xe8\xba\x4d\x8c\x39\x1e\xa2\xbd\xed\xae\x44\x57\xd7\xbf\x09\xea\x7c\x78\x47\x15\x1c\x43\x27\x31\xa6\x03\xa8\x65\xab\xcc\x3d\x66\x25\x79\xa9\x21\xda\x15\xfb\xf1\x2e\xc6\xb4\x9e\x72\xba\xe3\x3c\x87\xdf\x2b\x49\xb2\x0b\xc6\x82\x8a\x32\xd1\xa2\x62\xa0\xbc\x70\x55\xd7\x8f\xd5\x2f\x0f\x4b\x11\x76\x29\xba\x30\xe2\x03\x04\x29\xb2\xbf\x7b\xe4\x8a\xd9\x5f\x0a\x9d\x01\x26\x82\x07\x95\x65\x30\xac\x47\x3f\x12\x02\xc9\xc3\xed\xc8\x79\xf2\x99\x6c\xb1\x9e\x27\xc3\x3b\x2c\xe8\x18\xf9\x61\xb5\x83\x92\x9e\x9a\xde\xb4\xaa\x87\xa5\xdb\xba\xb2\xbf\xb5\xa6\x67\xd1\x0e\xd3\x31\xb3\xa7\x05\xb9\x61\xd9\x22\x8b\xc7\xf3\xf3\xc2\x7e\xdd\xda\x70\x83\x5a\xde\x40\xa2\x2c\x3b\xd8\xce\x99\x6e\xd4\x3a\x5f\xeb\xdb\xd3\xd5\x8e\x36\x40\x63\x7f\x05\x52\x2e\x82\x89\xf4\x17\x6a\x63\x4a\x49\x5b\x16\x44\xfc\x0a\xbc\x58\x0f\x71\xf4\x69\xcb\xa1\x0c\xfe\x31\x20\x08\x93\xe7\xd8\x63\xf2\x3b\xe2\x99\x73\xfa\x7f\x5d\xe2\xaa\x3e\x7e\x43\x6a\x29\x70\x80\xb7\x51\xc0\x24\x9e\xca\x7a\xec\x6c\x29\x5c\x69\xbd\x4d\x1d\xba\xb8\xd0\x02\xb3\x8f\x12\xbc\x9a\xcd\xfe\x72\xf8\x2a\x18\xfe\x05\xb4\x71\xe1\xee\x58\x37\xf9\x8a\xdd\x54\xec\x67\xc8\x09\x35\x87\x9c\x09\x1a\xc1\x24\xcc\x0c\xd5\xb4\x4e\x63\xc2\x0f\x62\xf6\xa3\x48\xe1\xaa\xc6\xad\x1e\xc1\x88\x1c\x28\xd9\x85\xd4\x52\xd2\x85\x22\x43\xfd\xa3\x92\xc1\xcf\x3b\xa5\xe5\x4f\xe1\xaf\x48\xc1\xf0\xe3\x6c\x41\xfe\x69\x21\xfb\x6a\xbf\x8c\xc8\x83\xd1\xe6\x41\xd1\xeb\xcd\xd3\x2a\x9a\x38\x56\xb2\x1b\x16\xf5\x6b\x1e\x2a\x19\xff\xf5\x8b\x76\x27\x94\xff\x73\x53\x8b\x9c\x48\xcf\xc2\xcc\x71\xa3\xd9\x6d\x3a\xb0\x3a\x99\xfe\x1b\x00\x00\xff\xff\xe5\x5b\x31\xa9\x20\x25\x00\x00")

func openapiDinosaursYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiDinosaursYaml,
		"openapi.dinosaurs.yaml",
	)
}

func openapiDinosaursYaml() (*asset, error) {
	bytes, err := openapiDinosaursYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.dinosaurs.yaml", size: 9504, mode: os.FileMode(420), modTime: time.Unix(1752199410, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x6f\xdb\x4a\x0e\x7e\xf7\xaf\x20\xd0\x5d\xb8\x2d\x6c\xd9\xc6\xbe\x2c\x8c\xa6\x40\xba\x4d\xd1\x2e\xda\x26\xa7\xce\x41\x1f\x13\x7a\x44\x59\xd3\x4a\x33\x0a\x87\x4a\xe2\x73\xc9\x6f\x3f\x98\x91\xac\x8b\xe3\x24\x4e\x4e\x4e\x5e\x22\x71\xc8\x8f\xfc\x78\xd3\xd8\x16\x64\xb0\xd0\x73\xf8\x4f\x34\x8d\xa6\x03\x6d\x12\x3b\x1f\x00\x88\x96\x8c\xe6\xc0\xe9\x58\x98\xae\x61\x41\x7c\xa9\x15\xc1\xe1\xc9\xa7\x01\x40\x4c\x4e\xb1\x2e\x44\x5b\x73\x97\xca\x25\xb1\x0b\xc7\xd3\x68\x1a\xcd\x06\x8e\xd8\x4b\x3c\xf2\x18\x4a\xce\xe6\x90\x8a\x14\xf3\xc9\x24\xb3\x0a\xb3\xd4\x3a\x99\xff\x77\x3a\x9d\x0e\x00\xb6\xd0\x55\xc9\x4c\x46\x20\xb6\x39\x6a\xd3\x37\x77\xf3\xc9\x04\x0b\x1d\x79\x0a\x2e\xd5\x89\x44\xca\xe6\xb7\x21\xbe\xa0\x36\xf0\xb2\x60\x1b\x97\xca\x4b\x5e\x41\x15\xcd\x6e\x30\x27\xb8\xa2\x87\x20\x17\x82\x2b\x6d\x56\x1b\xa0\x02\x25\x0d\xdc\x3c\xc2\xa4\x4e\xc8\xe4\x72\x36\x89\xb5\xb1\x0e\xcb\x8a\x38\xc0\xbf\x98\x92\x39\x0c\xeb\x94\x47\xcd\x69\xb4\xc6\x3c\x7b\x31\x09\x30\x93\x9b\x19\x16\xfa\x66\x56\xa3\xdc\xcc\x2e\x67\x37\xb3\x46\x73\x78\x9f\x93\xc9\xef\x3a\xfe\xf3\xb9\x3c\xdd\xcc\x3c\x9a\xf7\xf7\x02\x0e\x7f\x3d\x3d\x1e\x1f\xbe\x7f\x0f\x5f\x8f\xbe\xc3\xc9\xe1\xe9\xc7\xc5\x40\xd9\xbc\xb0\x86\x8c\x04\x6a\x8e\x54\xc9\x5a\xd6\x0b\x95\x52\x4e\x35\xdb\x77\x84\x4c\x5c\x3d\x03\xc8\xba\xa0\x2a\xd3\xb5\xc0\x05\xdd\x39\x2c\x83\x5a\x2d\xac\x5e\x3e\x58\xce\x51\xe6\xf0\xff\xef\xa7\x83\x5a\x11\x6b\xd0\xe3\xe5\x0f\x52\xf2\x8d\x12\x62\x32\x8a\xfa\xe8\x36\x1c\xd6\xa2\x82\x6d\x41\x2c\x7a\x13\x8e\xff\xd3\x71\xfb\xbc\x31\x72\xc2\xda\xac\x1a\xf1\x4f\x6d\x1e\x56\x4a\x7d\x7a\x1f\x52\x52\x4c\x28\x14\x9f\xa1\x3c\xa8\x0a\x90\xd4\x94\x63\x14\x1a\x8b\xce\xa9\x39\x2b\x8b\xf8\xef\xc2\x7c\xd6\x4e\x1e\x99\xa9\xbd\xd2\x50\xe0\x8a\x6e\x2b\x69\x23\xb4\x6a\x2a\x0a\xe0\xf4\x6f\x7b\x68\x89\x15\xcc\x1e\x52\x63\xba\x28\x35\x53\x27\xb2\x71\x88\xb4\xf3\xea\x63\xea\xbc\x7a\xe7\x9d\xd7\xe0\xa5\xf3\xae\x85\x72\x17\xde\x8f\x98\x6d\xd3\xac\x98\x65\xc7\x4d\x81\xc7\x9b\x69\x7a\x31\x69\xbb\x7e\x52\x77\xe5\x64\xab\x21\x87\x8d\xd1\x8e\x44\xef\x4e\x35\x80\xb2\x71\x2f\x43\x77\x96\x97\x09\x9d\x35\x7b\xa9\x7a\x3f\xe8\xb7\xd5\x59\xbf\xe9\x77\x18\x04\xea\xdd\x1e\x79\x04\x7d\x6f\xf6\x24\xce\x21\xf3\xbb\x02\x43\x66\x5c\xf7\xe4\x3b\x54\xe1\xde\xa0\x02\xa1\x2a\xaa\xf7\xf5\x3e\xdb\x98\x3f\xb0\x18\x77\x80\x6d\x10\xfa\x78\xdd\x74\x3d\x1d\xb3\xcd\xde\x46\x72\x82\xa2\xd2\x6f\x74\x51\xd2\x73\xe0\x77\xd1\x2a\x3f\x5b\xcb\x7c\xf1\xbf\x8f\x47\x5f\x0e\x17\x03\x3f\xcb\x8c\x39\x09\x6d\xbe\x55\x6d\xd7\x18\xf4\x6b\x5a\x6f\x86\x4c\x9b\x39\xf8\xef\x47\xfd\xda\xfb\x2e\x9e\xa6\x04\x3a\x06\x9b\x00\x93\xb2\x1c\x6f\x8f\x2d\x08\x97\xd4\xdd\xff\xd8\x96\xf5\x56\x5b\x76\xb7\x4b\x15\x43\x67\xb6\x7d\x14\x17\x25\xf1\x7a\x57\x18\x27\xb8\x22\x30\x65\xbe\x24\x6e\x63\x81\x4c\x3b\x81\xab\x94\x4c\x4f\x40\xd7\x8a\x28\x76\xe0\x0a\x52\x3a\xd1\x14\x07\x2f\xdd\xbd\xb1\x3b\xd0\xed\xfd\x15\x53\x82\x65\x26\x73\x98\x35\xa2\x5c\x1b\x9d\x97\x79\x2b\x6a\xf3\x90\x60\xe6\x2a\xfc\xee\x76\xac\x58\x76\x5c\xdf\xcb\xf2\x0b\x5e\x7b\xf8\x5b\x44\x1d\x88\x05\x26\x29\xd9\x3c\x91\x41\x7d\x11\xeb\x71\x98\xde\xc7\x81\x90\x55\xba\xc5\x22\xc8\xee\xe0\xb1\x0b\x64\x8b\xdd\x1f\xe3\x26\x86\x45\x5d\x1a\x07\x92\x52\x0d\x0c\x8a\xb5\x10\x6b\x8c\x42\xd3\xb9\xb5\x11\xbc\xf6\x39\x90\x54\xbb\xb6\x99\x41\xbb\xce\x77\x28\xd7\x19\xb2\xcf\x8e\x6c\x99\x10\x9c\x5d\xa5\xc4\x74\x06\x2a\xc3\xd2\x91\x97\xa2\x81\xc5\x2f\x9f\xc1\x09\x0a\xe5\x64\x64\xd4\x7e\x91\x9d\xbf\xfb\x79\x2b\x4f\xd5\x6d\x20\x7e\x38\x6b\x00\x45\x58\x2f\x4b\x21\x07\x13\x50\x36\x2b\x73\xd3\xd7\x42\xa5\x6c\x69\x24\x82\x06\xee\x83\x65\xa0\x6b\xcc\x8b\x8c\x46\xa0\x0d\x58\x8e\x89\xeb\x1a\xb2\xa6\x4b\xf2\xfb\xb8\x6b\xeb\xe0\x4a\x4b\x0a\x08\xa5\x23\xf6\xe0\x2d\x45\x41\x16\x1f\x5c\x50\x38\xcf\xd7\xe7\xf3\x41\x73\x78\x7e\x7e\xee\x2e\xb2\x0e\x8b\xca\x18\x32\xfd\x93\x60\x98\xaf\xff\x3d\xec\xaa\xb6\x76\xa7\xb7\x93\x0e\x0a\x0d\x60\xe6\x2c\x2c\x09\xb0\x28\x32\x3f\x37\xd6\x0f\x56\xe6\xef\x2a\xc0\xe4\x6c\xc9\x8a\xa2\x27\x90\x74\xe5\xb2\x69\x03\x07\x19\x2e\x29\xa3\x18\x96\x6b\x38\x4f\xac\x3d\x58\x22\x9f\x8f\xee\xe4\xd4\xb5\x3d\x0b\xa6\x2e\xfa\x49\x6b\x38\x80\x61\x62\xed\x10\xd0\xc4\x3b\x75\x2e\x31\x2b\xc9\x6b\x2d\x91\xef\xc8\xc2\xa7\xaa\x7c\xdd\xce\x32\x43\xf1\x1f\xb7\x4b\x1d\x53\x3c\x02\xcb\xa0\x2b\x9d\x0a\x4d\x3b\xa0\xbc\x90\xf5\xc8\xcb\x4c\x83\x73\xab\x96\x92\xa2\x04\x89\x2f\x08\xa4\xe8\xa0\x20\xce\xb5\xf3\x3f\x9f\x7c\x82\x1c\x11\x5c\xe9\x2c\x83\x65\x5b\xe7\x6a\xba\x29\x8e\xf6\xdd\xa5\x21\xdd\xef\xd6\xfd\x11\xad\x85\xff\xc0\x8c\x56\xd5\x5d\xae\x9f\x7d\x4a\x37\xc0\xfb\x0d\xea\xb2\x94\x47\x0f\xeb\xd6\x98\x3e\xb2\x81\x9b\xaa\x86\xe3\xaa\x6f\x37\x83\xb6\xc7\x28\xa2\x53\xbb\xbb\xef\x98\x9f\xe6\x13\xce\xd0\xc4\x67\x90\x68\x76\x02\xfb\x07\x31\xaa\x2c\xbe\xde\x1b\xd3\x73\x4d\x84\xb1\x40\xd7\x45\xa6\x95\x96\x8a\x42\xb5\xc0\x42\xc7\x6f\x96\xcb\xde\x8d\x9e\x68\xca\x62\xd7\xef\xf3\x4a\xf6\x3c\x6d\x5e\x86\x78\x1c\x20\x28\x9b\xe7\x38\x76\xe4\xf9\xfb\x9d\x17\x6e\x13\x36\xa9\xbd\xf9\x2a\x2d\xe9\xd6\xa0\x02\x7c\xa8\x8e\x6d\xe2\x17\xd1\xd8\x09\x97\x4a\x4a\xf6\x88\x26\x5c\x9c\xc2\xf5\xd7\xf9\x6a\xc0\x9b\xe6\xf4\x6d\xf4\x26\xc0\xbe\x05\x63\x25\xdc\xea\x5b\xc0\x37\x4e\x36\x4a\xaf\x21\x27\x34\x2e\x74\x45\xd0\x0f\x80\xd0\xc0\x34\x36\x47\x55\x23\xcf\xab\xae\x46\x95\xc2\xa2\xb3\x15\x7d\xec\x2b\x12\xd0\xf1\x28\xfc\xd2\x1d\x41\x91\xa1\x79\xa9\xe3\x10\xa3\xff\xbd\xf5\x2a\x3c\x55\xcb\x13\x5e\x36\xee\xdc\xab\x5e\x77\x35\xcf\x56\xe5\x01\xb0\xbf\xda\xc7\xe3\xb6\x75\x2a\xf3\x03\x1d\x8f\x82\x43\xef\x2f\xd2\x71\xf5\xdf\x3b\x1c\xd5\x8b\xfa\x75\xdf\x8a\x44\xa5\x9f\xc3\xc9\x41\xe7\x66\xd9\x75\x7e\x6f\xc3\xfc\x15\x00\x00\xff\xff\x60\x61\xbe\x23\xfc\x12\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 4860, mode: os.FileMode(420), modTime: time.Unix(1753038497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.dinosaurs.yaml": openapiDinosaursYaml,
	"openapi.yaml":           openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.dinosaurs.yaml": &bintree{openapiDinosaursYaml, map[string]*bintree{}},
	"openapi.yaml":           &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
