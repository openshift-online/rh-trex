// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdc\xb8\x11\xfe\xbe\xbf\x62\x80\xb6\xd8\xe4\xb0\x6f\xe9\x5d\x81\x56\x48\x0e\x48\xae\x97\xe2\x0e\x49\x9c\xc6\x49\xfb\xa1\x28\xec\x59\x72\xb4\xe2\x45\x22\x15\x72\x64\x7b\xd3\xf6\xbf\x17\x24\xf5\xba\x2b\x6f\xd6\x69\x72\x76\x83\x7c\xf2\x8a\x9a\x19\xce\x33\x9c\x79\x38\x22\x6d\x4a\xd2\x58\xaa\x04\xbe\x5d\xac\x16\xab\x89\xd2\xa9\x49\x26\x00\xac\x38\xa7\x04\x4e\x7e\x78\x0e\x3f\x5e\x61\x51\xe6\x04\xa7\x64\x2f\x94\x20\x78\xfc\xf2\xa7\x09\x80\x24\x27\xac\x2a\x59\x19\x7d\x48\xec\x82\xac\x0b\x22\xab\xc5\x6a\xf1\x60\xe2\xc8\xfa\x11\x3f\xc3\x1c\x2a\x9b\x27\x90\x31\x97\xc9\x72\x99\x1b\x81\x79\x66\x1c\x27\x7f\x5c\xad\x56\x13\x80\x9d\x19\x44\x65\x2d\x69\x06\x69\x0a\x54\x7a\xa8\xee\x92\xe5\x12\x4b\xb5\xf0\x50\x5c\xa6\x52\x5e\x08\x53\xec\x9b\x78\x8e\x4a\xc3\xbd\xd2\x1a\x59\x09\x3f\x72\x1f\xa2\x37\xe3\xc6\x1c\xe3\x86\x3e\x64\xf2\x94\x71\xa3\xf4\xa6\x31\x54\x22\x67\x01\x9b\xb7\xb0\x34\xa2\x98\x53\x0c\xca\xdc\xc5\xa0\x2c\x2f\x1e\x2c\xa5\xd2\xc6\x61\x15\x83\x00\xb0\x21\x8e\x3f\x00\x5c\x55\x14\x68\xb7\x09\xbc\x22\xae\xac\x76\x80\x90\x2b\xc7\x60\x52\x68\x95\x1a\x51\x12\x95\x55\xbc\x6d\x54\x3d\x84\x27\x84\x96\x6c\x02\xff\xf8\x67\x3d\x68\xc9\x95\x46\x3b\x72\x9d\xd4\xf4\xf7\xab\xd5\xb4\x7b\xdc\x81\xf3\x18\x7e\x3e\x3d\x79\x01\x68\x2d\x6e\xfb\xb3\x82\x59\xff\x42\x82\x5d\x4f\x4f\x18\xcd\xa4\xb9\x6f\x0a\x00\xcb\x32\x57\x02\xbd\xb1\xe5\x2f\xce\xe8\xe1\x5b\x00\x27\x32\x2a\x70\x77\x14\xe0\xb7\x96\xd2\x04\xa6\xbf\x59\x0a\x53\x94\x46\x93\x66\xb7\x8c\xb2\x6e\xf9\xe7\xda\x87\x67\xca\xf1\xb4\xc3\xf1\xdd\xea\xc1\x01\x1c\x15\x67\xc0\xe6\x2d\x69\x50\x0e\x94\xbe\xc0\x5c\xc9\xdb\x70\xfe\x47\x6b\x8d\x1d\x78\xfd\xed\xf5\x5e\xbf\xd1\x58\x71\x66\xac\x7a\x4f\x12\xd8\x40\x49\x36\x35\xb6\x00\x53\x92\x0d\x6e\xdd\x05\x04\x7f\x38\x94\x3f\x6f\x34\x5d\x95\x24\x98\x24\x90\xd7\x03\x23\x42\xdd\xde\x7e\xec\x4b\xb4\x58\x10\x93\x6d\x6b\x61\x3e\xaa\xdc\xc9\x2d\x4b\xdc\xd0\xf4\x58\x61\xa7\xde\xdf\x40\x98\xd0\x8a\xec\x68\x71\x63\x25\xd9\x27\xdb\xa3\xe5\x53\x45\xb9\x74\x51\xbc\xf4\x8c\xba\x4b\x2f\x3f\x58\x42\x26\x40\xd0\x74\xd9\xd6\xf8\xcd\x88\xe5\x5d\x45\x8e\x9f\x18\xd9\x93\x1b\x64\x42\x53\xb5\x20\x91\xb1\x15\xf1\x7a\xca\x92\x4c\x80\x6d\x45\x93\x03\x29\x71\x38\x21\xc6\xd3\xe1\x18\x16\x99\x1e\xa4\xc6\x03\x94\x12\x63\x76\x2b\x89\xbc\xeb\x7b\xe0\x91\x03\x55\xf8\x37\xcf\x76\xc1\x85\x58\x85\xee\xee\x94\xe1\x57\xe2\xbe\x45\x04\x7f\xba\x1e\x41\x5b\xae\x98\x5b\x42\xb9\x05\xba\x52\xee\x76\xf6\xfb\x1b\x6d\x38\x8f\x35\x54\xd7\xed\x39\x20\x7c\xc9\xfa\xee\x8c\x33\xda\xa5\xb9\xdb\x81\x74\x54\x5b\xb8\xfc\x97\x92\xff\xb9\xbe\x37\xfc\x0b\x31\xa0\xee\x5a\xb3\xf5\x16\xda\x12\xf9\x3c\x5d\x61\x9b\x1c\xa9\xa9\xb4\x1c\x4c\xf8\xab\x86\x71\x94\x07\xbf\x92\xc9\xed\x20\xf8\xee\x7a\x04\x2f\x4c\x97\x9d\x97\x8a\x33\x70\x25\x09\x95\x2a\x92\xa0\xe4\xff\x0b\xb3\xdc\xd5\x56\xb6\x44\x16\xd9\x1e\x29\xbc\x29\x65\xe8\xe8\xf4\x67\x6a\xe7\xa2\x7d\xd9\xad\xeb\x1d\x6b\xeb\x5e\xfa\xa8\xbc\x8a\x30\x0e\xb7\x78\xc7\xf0\x5c\x55\xa3\x75\x95\x10\xe4\x5c\x5a\xe5\xf9\xf6\xce\x10\xde\xd7\xc6\xef\x57\xf6\xfa\x2b\x57\xdf\x09\x10\x5f\x60\xf7\xba\xb7\xc7\x04\xe2\xf1\x1d\xeb\x9d\xe8\x56\xf7\x4f\x4d\x3e\x78\xf4\xa0\xe4\x74\xd2\xbd\xf1\x4a\xcd\x06\x74\xea\xad\x37\x5c\x5c\xef\x40\xb5\x5b\xbc\x2d\x29\x9e\xbd\x4e\x7a\x5e\x53\x02\xeb\x20\x56\x0f\xc6\x87\xa7\xc6\x16\xc8\x09\xfc\xfc\xf7\xd7\x93\x06\x5e\x6d\xf4\x24\x9c\x51\xbe\xa2\x94\x2c\x69\x41\x43\xeb\xf1\x00\xb3\x1e\x2a\xad\x2f\x50\x56\xfd\xad\x41\xc9\x7e\x94\xa2\x92\x63\xab\xf4\xa6\x1d\x7e\xab\xf4\x87\x85\x32\x1f\xa0\x43\x42\xcf\x54\x77\x22\x73\xa4\x6f\x47\x4d\x5c\xe2\x86\xf6\x85\x94\x66\xda\x50\x97\x47\x4e\xbd\x3f\x42\x8a\x0d\x63\xfe\x21\xb1\x76\xd7\xef\xb5\x16\xde\xd3\xde\xa3\xf7\xa9\xf7\xe8\x27\xef\x3d\x86\x59\x7a\xcf\x8a\xa9\x88\x45\x1b\x52\xb0\xb1\x8b\x79\x7e\x92\x1e\x3e\xb5\x6b\x52\x77\x27\x05\xba\x13\xb3\x91\x40\x8f\x87\xda\xd7\x99\xa4\x61\xc1\x8c\x86\xdb\xe3\xc7\xbd\x8a\xbb\x46\xb4\xdd\x0f\xce\x86\x69\x36\xa2\x10\xa0\xf7\x73\xe4\x06\xf0\xfb\x47\xe4\x37\xc2\x1c\x22\x3f\xe6\x58\xb8\x09\x18\x8c\x8f\x88\x1e\x4d\x27\x0d\x4f\xdf\xd2\xca\x86\xad\x8d\x46\x71\xee\xad\x98\x88\xc7\x7d\x67\xc8\x47\x89\x03\xa4\x35\x31\xf9\xce\x71\xce\xaa\xa0\xde\xdb\xba\x9f\xfc\x5f\x8d\xf5\x6f\x42\xbe\x94\xec\x18\xb6\xb8\x63\xed\xfc\x0d\xb9\x72\x64\x91\x77\xc2\xbc\xbb\xa9\x75\x25\xa9\xd1\xef\x3a\x6d\xdf\xa9\x74\xe2\x3f\xb7\xb2\xfa\x71\xb0\x75\xbf\xce\xc8\x37\x48\x26\x05\x4b\xc2\x58\xb9\xcb\x89\xfd\x2f\xa1\xdd\x4d\x78\x6f\xd9\xfb\xd4\x1d\x7d\xe8\x11\xa7\xf7\xe2\x5d\x45\x76\x3b\xe6\xc6\x4b\xdc\x10\xe8\xaa\x58\x93\xed\x7c\x89\x97\x86\x97\x19\xe9\xc1\x00\x5d\x09\x22\xe9\x7a\x1d\x9e\x9f\xa5\x4f\xca\xe3\x8e\xee\x6e\x0e\x92\x52\xac\x72\x4e\xe0\x41\x3b\x54\x28\xad\x8a\xaa\xe8\x86\xba\x38\xa4\x98\xbb\x68\xbf\xbf\xf5\x44\x94\xbd\xa9\x0f\xa2\x7c\x8e\x57\xde\xfc\x1e\x50\xe7\x7b\x6e\x1b\xee\x4a\x3f\x12\x41\x7d\xd3\x3c\xc0\xb0\x3a\x84\x21\xdc\xdc\xec\xa0\x08\x63\xd7\xe0\x18\x33\xb2\x83\xee\xdf\xf3\xd6\x87\xd3\x7a\x69\x5c\x38\xb2\x8c\x86\x41\x58\xc5\x64\x15\x2e\x42\xd2\xb9\xad\x66\xbc\xf2\x31\xe0\x4c\xb9\x2e\x99\x41\xb9\xde\x26\x5f\xa8\x1c\xad\x8f\x0e\xef\xa8\x10\x9c\x5d\x66\x64\xe9\x0c\x44\x8e\x95\x23\x3f\x8a\x1a\x4e\xff\xfa\x0c\x1c\x23\x53\x41\x9a\x67\xad\xa1\xca\x35\xc7\xa7\x1e\xaa\x6b\x4c\xf8\x4e\x13\x90\xd9\xaa\x75\xc5\xe4\x60\x09\xc2\xe4\x55\xa1\x87\x52\x28\x84\xa9\x34\x2f\xa0\x35\xf7\xd4\x58\xa8\x4f\x3e\x67\xa0\x34\x84\x8b\xad\x7a\x0d\xad\xa2\x0b\xf2\x74\xd6\xd7\x75\xf1\x9b\x04\xa1\x72\x64\xbd\xf1\x0e\x22\xa3\x0d\x9d\x72\x10\x38\x2f\xb6\xe7\xc9\xa4\x7d\x79\x7e\x7e\xee\xde\xe5\x3d\x14\x51\x19\x72\xf5\x96\x60\x5a\x6c\x7f\x37\xed\x8b\x76\x7a\xaf\xf7\x83\x0e\x02\x35\x60\xee\x0c\xac\x29\x76\xdb\x24\xc1\xf8\xc2\xca\xc3\x11\x81\x25\x67\x2a\x2b\x68\xf1\x11\x20\x5d\xb5\x6e\xd3\xc0\x41\x8e\x6b\xca\x29\x1c\xaf\x9e\xa7\xc6\x3c\x5a\xa3\x3d\x9f\x5d\x8b\xa9\xaf\x7b\x16\x54\xdd\xe2\x2d\x6d\xe1\x11\x4c\x53\x63\xa6\x80\x5a\x8e\xca\x5c\x60\x5e\x91\x97\x5a\xa3\xbd\x26\x0a\x3f\xc5\xe5\xeb\x67\x96\x9e\xb2\x27\xdb\x0b\x25\x49\xce\xc0\x58\x50\x51\x26\x5a\x53\x0e\xa8\x28\x79\x3b\xf3\x63\xdd\x27\xef\xde\x5a\x72\x86\x1c\x46\xfc\x82\x40\x86\xce\x7f\x2f\x17\xca\x39\x65\xb4\x0f\x90\x23\x82\x4b\x95\xe7\xb0\xee\xd6\x39\x56\x37\xc9\xc5\xb1\x5c\x5a\x5f\x96\x0e\x4b\xb4\x1e\xfc\x0c\x35\x1a\x57\x77\xbd\xfd\xe4\x55\xda\x18\x3e\xae\x50\xd7\x15\xdf\xb8\x58\x77\xca\xf4\x86\x09\xdc\xae\x6a\x78\x1d\xf3\xb6\x29\xb4\x23\x4a\x11\x9d\x18\xcf\xbe\x13\xfb\x71\x73\xc2\x19\x6a\x79\x06\xa9\xb2\x8e\xe1\x78\x27\x66\x51\xe3\xc5\x41\x9f\x3e\x55\x45\x68\x03\x74\xe5\x3f\xd8\x15\x47\x08\x91\xc0\x42\xc6\x37\xe4\x72\x74\xa2\xc7\x5b\xfe\x61\x9e\xc7\xb1\x4f\x93\xe6\x55\xf0\xc7\x01\x82\x30\x45\x81\x73\x47\x1e\xbf\xe7\xbc\xe6\x7f\x92\xe2\x6c\x7e\x95\xd6\xb4\x57\xa8\x00\x4f\xe3\x6b\x93\x7a\x22\x9a\x3b\xb6\x95\xe0\xca\x7a\x8b\x3a\x34\x4e\xa1\x7b\x74\x7e\x35\xe0\x61\xfb\xf6\xfb\xc5\xc3\x60\xf6\x7b\xd0\x86\xc3\x27\x53\x67\xf0\xa1\xe3\x46\xe8\x1b\x28\x08\xb5\x0b\x59\x11\xe4\x83\x41\x68\xcd\xb4\x3a\xf5\x3f\xa5\x25\x31\xab\x51\x64\x70\xda\x63\x45\xef\xfb\x86\x18\x94\x9c\x85\x0f\xf7\x19\x94\x39\xea\x7b\x4a\x06\x1f\xfd\xc7\xec\xfd\xf0\x2b\x92\x27\xdc\x6b\xa7\x73\xf7\x07\xd9\xd5\xfe\x36\xa2\x08\x06\x87\xd4\x3e\x9f\x77\xa9\x13\xd5\x1f\x29\x39\x0b\x13\xfa\xf9\x16\x4a\xc6\xbf\x7e\xc2\x59\x4d\xd4\xdf\x0c\xb5\x88\x45\xf6\x2c\xbc\x79\x34\x38\x63\xef\x26\x3f\x98\x30\xff\x0d\x00\x00\xff\xff\xd4\xc4\xfa\xb3\xe5\x27\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 10213, mode: os.FileMode(420), modTime: time.Unix(1693313735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
