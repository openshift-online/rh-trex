// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.dinosaurs.yaml
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiDinosaursYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\x37\x12\x7f\xf7\xa7\x18\x20\x77\x50\x12\x48\x96\x73\x97\x7b\x38\x21\x0e\xe0\x24\xce\x5d\x0a\xc7\x4e\x6d\xa7\x7d\x28\x0a\x7b\xc4\x9d\xd5\x32\xde\x25\x37\x1c\xae\xad\x4d\xdb\xef\x5e\x90\xd4\x9f\x5d\x69\xf5\x2f\xb1\x50\xa5\xf0\x53\x2c\x72\x66\x38\x3f\xce\xcc\x8f\x43\x6e\x72\xb4\x09\xf7\xf6\x00\x1e\xc1\xe9\xf1\xcf\x70\x7c\xfa\xe6\xc3\xd9\xbb\xd3\x4b\xb8\xb8\x3c\x3a\xbf\xdc\x03\xe8\x62\x2e\xbb\x26\xe9\x58\x43\xc3\xee\xed\xb3\x6e\x24\x95\x66\x2c\x4c\x93\xce\xf1\xe9\x9b\x3d\x00\x80\x01\xd9\x9e\xff\x03\x80\x8b\x2c\x43\x53\xf6\xe0\x9c\x6c\x61\x14\x03\x42\x2a\xd9\x82\x8e\x61\x62\x69\x2c\x4a\xa2\x30\xd2\x96\x63\x55\x80\x0e\xbc\x22\x34\x64\x7a\xf0\xcb\xaf\xa3\x41\x43\x9c\x6b\xc5\xc4\x53\xa9\xd6\xbf\x0e\x0e\x5a\xd3\x9f\x00\x11\xb1\x30\x32\xb7\x52\xab\x1e\x1c\xc1\x0f\x17\x67\xa7\x80\xc6\x60\x59\x5d\x15\x74\xff\x13\x09\xcb\x15\x3d\xa1\x95\x25\x65\xab\xa6\x00\x30\xcf\x53\x29\xd0\x19\xeb\x7e\x62\xad\xea\xb3\x00\x2c\x12\xca\x70\x76\x14\xe0\x1f\x86\xe2\x1e\xb4\x1e\x75\x85\xce\x72\xad\x48\x59\xee\x06\x59\xee\xbe\x19\xf9\x70\x22\xd9\xb6\xa6\x38\x9e\x1f\x3c\x5b\x82\xa3\xb0\x09\x58\x7d\x43\x0a\x24\x83\x54\xb7\x98\xca\x68\xcb\xce\xeb\x9c\x14\xe6\x72\xbf\xc4\x2c\x6d\x04\x72\x6c\x8c\x36\x35\x04\xff\x5e\x8c\xe0\xa3\xc2\xc2\x26\xda\xc8\x2f\x14\x81\xd5\x90\x93\x89\xb5\xc9\x40\xe7\x64\xbc\x8b\xbb\x86\xe6\x3f\xcb\xf2\xea\xa3\xa2\x61\x4e\xc2\x52\x04\xe4\xf4\x40\x0b\x51\x18\x43\xbb\x15\x93\x1c\x0d\x66\x64\xc9\x70\xb5\xaa\x9a\x72\x73\x2a\xd9\xcd\x71\x40\xad\xf5\xc5\x59\x7e\xd9\x48\x9c\xd0\x88\x64\x03\x05\x6d\x22\x32\xaf\xca\x0d\x34\x62\x49\x69\xc4\x41\x21\xd7\x3c\x4f\x46\xaf\x0d\xa1\x25\x40\x50\x74\x37\x61\x84\xcd\x68\xe8\x73\x41\x6c\x5f\xe9\xa8\x22\x57\xcb\x8f\x71\x8d\x43\x84\x16\x27\x22\x4e\x4f\x1a\x8a\x7a\x60\x4d\x41\x7b\x4b\x12\x65\x79\x9a\x34\x27\xc9\x3a\x9c\xd3\x5a\x4a\xa4\x4b\x08\x28\xec\xd9\xb6\xd3\x7b\x2d\xdf\x3d\xd3\x2c\xa9\xcd\x9f\x1c\x37\x7a\x17\x42\x6d\xf2\x6e\x16\xe7\x03\xe5\xef\x1c\xe5\x3f\x3f\xf8\xef\x62\x34\x93\x92\xc6\xd4\x10\x46\x25\xd0\x50\xf2\xd6\x3b\x88\xfb\x3d\xb6\x8e\x14\x14\x8b\x4e\x2e\x10\xae\xc4\xa5\x1a\x80\x4d\x68\x96\x16\xff\x7a\x78\x9b\x36\xa8\xdd\xdf\x64\xf4\xc7\x86\x5d\xea\xff\xc8\x02\xaa\x69\x93\xd8\x2f\x61\x52\x72\xdb\xe9\x4f\x27\x49\x15\xeb\x42\x45\xb5\x05\xb7\xb5\xe5\xeb\x73\xec\x03\x39\xed\x16\x9a\xe7\x8b\xd1\x9c\xea\x69\xd6\xde\x49\x9b\x00\xe7\x24\x64\x2c\x29\x02\x19\x7d\x8f\x4c\xf5\x3d\x34\xd8\x39\x5a\x91\xcc\x91\xc8\xc7\x3c\xf2\xdd\xa5\xda\x52\x6b\x19\xec\x47\xd3\x78\xef\x58\x8b\xf9\xc1\xed\xca\x79\x80\xb1\xbc\xdd\x5c\x87\x17\x8b\x11\x5a\x2e\x84\x20\xe6\xb8\x48\xd3\x72\x67\x08\xf2\xa1\x09\xdd\x11\x04\x0f\x3c\xbf\xc3\x3c\xff\xb7\xef\xaa\xe7\xce\x2a\x4f\x5a\xae\x93\xde\xb9\x2e\xba\xe9\x4d\x68\xe5\x83\x8a\x8c\x5a\x7b\xd3\x19\xa7\x36\xb2\x1b\x2c\x84\x06\xfb\xe2\xf5\xff\x8f\xdf\x1f\x4d\xfa\x72\x98\x44\xb6\x41\x68\xdc\x83\x03\x60\x9a\x9e\xc5\x0d\x8f\x53\x2b\x11\x9d\xf9\xf7\xdb\x73\x8a\xc9\x90\x12\xb5\x17\x28\x5b\xe6\xd4\x1b\x3d\xf0\x56\x76\x6c\x72\x32\xd6\x76\xb1\x13\x2a\x88\xaa\x19\x97\x1b\x47\x0e\x56\x56\x8f\x2b\x1f\x85\x20\x39\x1b\x86\xb0\x1e\x5b\x23\xd5\xa0\x36\x25\xc2\x9b\xc9\x15\xda\xb5\x55\x00\x1c\x39\xa1\xed\xb9\x53\x9d\x3a\x56\x66\x54\x9b\x1f\x1d\x87\xf7\x61\x72\x45\xd8\x4e\xe4\xf8\xe5\xec\xbe\x43\x57\x7f\xf7\x5e\x18\xaf\x45\x51\x90\x96\xb2\x05\x31\xf0\xcf\xfc\x33\x33\x8d\xe2\x9b\x9c\xf5\x2b\xf6\xa9\xda\xee\x2c\xdd\xaf\x06\x98\x4d\x10\x1b\x92\x6c\x26\xb4\xf3\x15\x2c\x2b\x49\xad\x30\xa3\x5e\xf5\x16\x29\x55\xcf\x75\xaa\x49\x73\x37\x79\x99\x90\x3b\x39\x74\x0c\x86\x84\x36\xd1\xaa\x46\x72\x9e\x89\x1a\x12\x2f\xc7\x01\xcd\x7a\xe4\xc6\x6a\x3e\x7d\x2e\xc8\x94\xcd\x4e\x7d\xc0\x01\x81\x2a\xb2\x3e\x99\xa9\x67\xe1\xcb\xd1\x5d\x42\xaa\x36\x40\x43\x41\x14\x71\xe5\x20\x74\x2b\x01\xcb\x2f\xab\x9d\x96\xca\xd2\x80\x4c\x8d\xd7\x63\x2c\x52\xdb\x83\x67\x95\xc1\x4c\x2a\x99\x15\x59\x75\x70\xba\x3b\x31\xa6\x3c\x5e\xc9\x2d\x3a\x8b\xbb\xe6\xc8\x0a\xdc\xef\x71\xe8\x16\x9a\x83\xce\xae\x71\x31\xfe\x13\xda\x37\x61\x3a\x38\x68\x42\x75\xb0\x0a\x95\x7f\xb2\x9f\xc3\xe5\x47\x97\x20\x6b\x36\x36\x83\xf8\xf7\x4e\xc5\xa3\x8b\x51\x08\xd9\xbf\x40\x85\x05\x40\x18\x69\xc9\x48\xdc\xf7\xa9\xca\xa5\xb2\x38\x74\x3b\x63\x13\xc9\xd3\x52\x00\x59\x25\x70\x96\x99\x4c\xd1\xb8\x5d\xb3\x33\x4a\x04\x57\x77\x09\x19\xba\x02\x91\x62\xc1\xe4\x46\x51\xc1\xc5\x8f\x27\xc0\x16\x2d\x65\xa4\x6c\xbb\x62\xaa\xe0\xf1\x8b\x98\x83\xcd\x63\x23\xee\x90\x06\xb4\xd6\xc8\x7e\x61\x89\xa1\x0b\x42\xa7\x45\xa6\xea\x52\x28\x84\x2e\x94\xdd\xaf\xd8\x7b\xab\x0d\xd0\x10\xb3\x3c\xa5\x36\x48\x05\xfe\xf3\xc6\x28\xbc\x46\xd2\x2d\x39\x5e\xad\x2a\x73\xe8\xf3\x10\x0a\x26\xe3\xac\x57\x71\x5a\x34\xbe\xcf\xf0\x22\xd7\x59\x79\xdd\xdb\xab\x4c\x5f\x5f\x5f\xf3\xe7\xb4\x06\x26\x98\x80\x54\xde\x10\xb4\xb2\xf2\x9f\xad\xba\x78\x55\xfb\x72\x3e\x06\x20\x50\x01\xa6\xac\xa1\x4f\xa1\x67\xa1\x08\xb4\xab\xc7\xd4\x5f\xd2\x0c\xb1\x2e\x8c\xa0\xaf\x03\xcc\x45\x7f\x92\x19\x0c\x29\xf6\x29\x25\xff\x24\x76\x1d\x6b\x7d\xd8\x47\x73\xdd\x5e\x8a\xae\xaa\x7f\xe5\xd5\x79\xff\x86\x4a\x38\x84\x56\xac\x75\x0b\x50\x45\x8d\x32\xb7\x98\x16\xe4\xa4\xfa\x68\x96\xec\xc7\xbb\x10\xd3\x6a\xca\xa9\x96\x75\x1c\x7e\x2b\x23\x8a\xda\xa0\x0d\xc8\x20\x13\x2c\x4a\x06\xca\x72\x5b\xb6\xdd\x58\xf5\x9a\x31\x17\x61\x9b\xa0\xf5\x23\x2e\x40\x90\x20\xbb\x5b\x4a\x26\x99\xdd\xf5\xd1\x6a\x60\x22\xb8\x93\x69\x0a\x7d\xaa\x35\x34\x8e\x10\x28\xda\xdf\x8c\x9c\x47\x1f\xd4\x66\xeb\x79\x34\xbc\xc5\x82\x0e\x91\xef\x97\x5b\x28\xe9\xb1\xe9\x75\xab\xba\x5f\xd8\x8d\x2b\xfb\x5b\x6b\x7a\x12\x6d\x3f\x1d\x32\x7b\x5c\x90\x6b\x96\x2d\xb2\x58\x9c\x9f\x67\xe6\xeb\xd6\x86\x2b\x54\xd1\x15\xc4\xd2\xb0\x85\xcd\x9c\x69\x07\xad\xd3\x95\xbe\xdd\x5f\xed\x28\x0d\x34\x74\x97\x25\x69\x03\x98\x40\x7f\xbe\x36\xc6\x94\xb4\x61\x41\x84\xef\xc5\xb3\xf5\x10\x46\xef\xb7\x1c\x0a\xef\x1f\x03\x82\xd0\x59\x86\x1d\x26\xb7\x23\x8e\x39\xc7\xff\x2b\x26\xac\xea\xe2\xd7\xa7\x86\x02\x07\x78\x1b\x04\x74\xec\xa8\xac\xc3\xd6\x14\xc2\x16\xc6\xd9\x54\xbe\x8b\xf3\x2d\x30\xbb\x28\xc1\x8b\xc9\xec\xcb\xfd\x17\xde\xf0\x4b\x50\xda\xfa\x5b\x66\xd5\xe4\x0b\xb6\x63\xb1\xa7\x90\x11\x2a\xf6\x39\xe3\x35\xbc\x49\x98\x18\xaa\x68\x1d\x87\x84\xef\x85\xec\x47\x91\xc0\x45\x85\x5b\x1d\x82\x01\x59\x90\x51\x1b\x12\x43\x71\x1b\xf2\x14\xd5\x63\x19\x79\x3f\x6f\xa4\x8a\x9e\xf8\xbf\x02\x05\xc3\xe3\xc9\x82\xfc\x64\x26\xfb\x2a\xbf\xb4\xc8\xbc\xd1\xfa\x41\xd1\xe9\x4c\xd3\x2a\x98\x38\x94\x51\xdb\x2f\xea\xd6\xdc\x97\x51\xf8\xd7\x2d\xda\x1e\x51\xfe\xd3\xba\x16\x59\x91\x9c\xf8\x99\xc3\x5a\xb3\x5b\x77\x60\x79\x32\xfd\x19\x00\x00\xff\xff\x0a\xd5\x85\x72\x4a\x25\x00\x00")

func openapiDinosaursYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiDinosaursYaml,
		"openapi.dinosaurs.yaml",
	)
}

func openapiDinosaursYaml() (*asset, error) {
	bytes, err := openapiDinosaursYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.dinosaurs.yaml", size: 9546, mode: os.FileMode(420), modTime: time.Unix(1760640587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x6f\xdb\x4a\x0e\x7e\xf7\xaf\x20\xd0\x5d\xb8\x2d\x6c\xd9\xc6\xbe\x2c\x8c\xa6\x40\xba\x4d\xd1\x2e\xda\x26\xa7\xce\x41\x1f\x13\x7a\x44\x59\xd3\x4a\x33\x0a\x87\x4a\xe2\x73\xc9\x6f\x3f\x98\x91\xac\x8b\xe3\x24\x4e\x4e\x4e\x5e\x22\x71\xc8\x8f\xfc\x78\xd3\xd8\x16\x64\xb0\xd0\x73\xf8\x4f\x34\x8d\xa6\x03\x6d\x12\x3b\x1f\x00\x88\x96\x8c\xe6\xc0\xe9\x58\x98\xae\x61\x41\x7c\xa9\x15\xc1\xe1\xc9\xa7\x01\x40\x4c\x4e\xb1\x2e\x44\x5b\x73\x97\xca\x25\xb1\x0b\xc7\xd3\x68\x1a\xcd\x06\x8e\xd8\x4b\x3c\xf2\x18\x4a\xce\xe6\x90\x8a\x14\xf3\xc9\x24\xb3\x0a\xb3\xd4\x3a\x99\xff\x77\x3a\x9d\x0e\x00\xb6\xd0\x55\xc9\x4c\x46\x20\xb6\x39\x6a\xd3\x37\x77\xf3\xc9\x04\x0b\x1d\x79\x0a\x2e\xd5\x89\x44\xca\xe6\xb7\x21\xbe\xa0\x36\xf0\xb2\x60\x1b\x97\xca\x4b\x5e\x41\x15\xcd\x6e\x30\x27\xb8\xa2\x87\x20\x17\x82\x2b\x6d\x56\x1b\xa0\x02\x25\x0d\xdc\x3c\xc2\xa4\x4e\xc8\xe4\x72\x36\x89\xb5\xb1\x0e\xcb\x8a\x38\xc0\xbf\x98\x92\x39\x0c\xeb\x94\x47\xcd\x69\xb4\xc6\x3c\x7b\x31\x09\x30\x93\x9b\x19\x16\xfa\x66\x56\xa3\xdc\xcc\x2e\x67\x37\xb3\x46\x73\x78\x9f\x93\xc9\xef\x3a\xfe\xf3\xb9\x3c\xdd\xcc\x3c\x9a\xf7\xf7\x02\x0e\x7f\x3d\x3d\x1e\x1f\xbe\x7f\x0f\x5f\x8f\xbe\xc3\xc9\xe1\xe9\xc7\xc5\x40\xd9\xbc\xb0\x86\x8c\x04\x6a\x8e\x54\xc9\x5a\xd6\x0b\x95\x52\x4e\x35\xdb\x77\x84\x4c\x5c\x3d\x03\xc8\xba\xa0\x2a\xd3\xb5\xc0\x05\xdd\x39\x2c\x83\x5a\x2d\xac\x5e\x3e\x58\xce\x51\xe6\xf0\xff\xef\xa7\x83\x5a\x11\x6b\xd0\xe3\xe5\x0f\x52\xf2\x8d\x12\x62\x32\x8a\xfa\xe8\x36\x1c\xd6\xa2\x82\x6d\x41\x2c\x7a\x13\x8e\xff\xd3\x71\xfb\xbc\x31\x72\xc2\xda\xac\x1a\xf1\x4f\x6d\x1e\x56\x4a\x7d\x7a\x1f\x52\x52\x4c\x28\x14\x9f\xa1\x3c\xa8\x0a\x90\xd4\x94\x63\x14\x1a\x8b\xce\xa9\x39\x2b\x8b\xf8\xef\xc2\x7c\xd6\x4e\x1e\x99\xa9\xbd\xd2\x50\xe0\x8a\x6e\x2b\x69\x23\xb4\x6a\x2a\x0a\xe0\xf4\x6f\x7b\x68\x89\x15\xcc\x1e\x52\x63\xba\x28\x35\x53\x27\xb2\x71\x88\xb4\xf3\xea\x63\xea\xbc\x7a\xe7\x9d\xd7\xe0\xa5\xf3\xae\x85\x72\x17\xde\x8f\x98\x6d\xd3\xac\x98\x65\xc7\x4d\x81\xc7\x9b\x69\x7a\x31\x69\xbb\x7e\x52\x77\xe5\x64\xab\x21\x87\x8d\xd1\x8e\x44\xef\x4e\x35\x80\xb2\x71\x2f\x43\x77\x96\x97\x09\x9d\x35\x7b\xa9\x7a\x3f\xe8\xb7\xd5\x59\xbf\xe9\x77\x18\x04\xea\xdd\x1e\x79\x04\x7d\x6f\xf6\x24\xce\x21\xf3\xbb\x02\x43\x66\x5c\xf7\xe4\x3b\x54\xe1\xde\xa0\x02\xa1\x2a\xaa\xf7\xf5\x3e\xdb\x98\x3f\xb0\x18\x77\x80\x6d\x10\xfa\x78\xdd\x74\x3d\x1d\xb3\xcd\xde\x46\x72\x82\xa2\xd2\x6f\x74\x51\xd2\x73\xe0\x77\xd1\x2a\x3f\x5b\xcb\x7c\xf1\xbf\x8f\x47\x5f\x0e\x17\x03\x3f\xcb\x8c\x39\x09\x6d\xbe\x55\x6d\xd7\x18\xf4\x6b\x5a\x6f\x86\x4c\x9b\x39\xf8\xef\x47\xfd\xda\xfb\x2e\x9e\xa6\x04\x3a\x06\x9b\x00\x93\xb2\x1c\x6f\x8f\x2d\x08\x97\xd4\xdd\xff\xd8\x96\xf5\x56\x5b\x76\xb7\x4b\x15\x43\x67\xb6\x7d\x14\x17\x25\xf1\x7a\x57\x18\x27\xb8\x22\x30\x65\xbe\x24\x6e\x63\x81\x4c\x3b\x81\xab\x94\x4c\x4f\x40\xd7\x8a\x28\x76\xe0\x0a\x52\x3a\xd1\x14\x07\x2f\xdd\xbd\xb1\x3b\xd0\xed\xfd\x15\x53\x82\x65\x26\x73\x98\x35\xa2\x5c\x1b\x9d\x97\x79\x2b\x6a\xf3\x90\x60\xe6\x2a\xfc\xee\x76\xac\x58\x76\x5c\xdf\xcb\xf2\x0b\x5e\x7b\xf8\x5b\x44\x1d\x88\x05\x26\x29\xd9\x3c\x91\x41\x7d\x11\xeb\x71\x98\xde\xc7\x81\x90\x55\xba\xc5\x22\xc8\xee\xe0\xb1\x0b\x64\x8b\xdd\x1f\xe3\x26\x86\x45\x5d\x1a\x07\x92\x52\x0d\x0c\x8a\xb5\x10\x6b\x8c\x42\xd3\xb9\xb5\x11\xbc\xf6\x39\x90\x54\xbb\xb6\x99\x41\xbb\xce\x77\x28\xd7\x19\xb2\xcf\x8e\x6c\x99\x10\x9c\x5d\xa5\xc4\x74\x06\x2a\xc3\xd2\x91\x97\xa2\x81\xc5\x2f\x9f\xc1\x09\x0a\xe5\x64\x64\xd4\x7e\x91\x9d\xbf\xfb\x79\x2b\x4f\xd5\x6d\x20\x7e\x38\x6b\x00\x45\x58\x2f\x4b\x21\x07\x13\x50\x36\x2b\x73\xd3\xd7\x42\xa5\x6c\x69\x24\x82\x06\xee\x83\x65\xa0\x6b\xcc\x8b\x8c\x46\xa0\x0d\x58\x8e\x89\xeb\x1a\xb2\xa6\x4b\xf2\xfb\xb8\x6b\xeb\xe0\x4a\x4b\x0a\x08\xa5\x23\xf6\xe0\x2d\x45\x41\x16\x1f\x5c\x50\x38\xcf\xd7\xe7\xf3\x41\x73\x78\x7e\x7e\xee\x2e\xb2\x0e\x8b\xca\x18\x32\xfd\x93\x60\x98\xaf\xff\x3d\xec\xaa\xb6\x76\xa7\xb7\x93\x0e\x0a\x0d\x60\xe6\x2c\x2c\x09\xb0\x28\x32\x3f\x37\xd6\x0f\x56\xe6\xef\x2a\xc0\xe4\x6c\xc9\x8a\xa2\x27\x90\x74\xe5\xb2\x69\x03\x07\x19\x2e\x29\xa3\x18\x96\x6b\x38\x4f\xac\x3d\x58\x22\x9f\x8f\xee\xe4\xd4\xb5\x3d\x0b\xa6\x2e\xfa\x49\x6b\x38\x80\x61\x62\xed\x10\xd0\xc4\x3b\x75\x2e\x31\x2b\xc9\x6b\x2d\x91\xef\xc8\xc2\xa7\xaa\x7c\xdd\xce\x32\x43\xf1\x1f\xb7\x4b\x1d\x53\x3c\x02\xcb\xa0\x2b\x9d\x0a\x4d\x3b\xa0\xbc\x90\xf5\xc8\xcb\x4c\x83\x73\xab\x96\x92\xa2\x04\x89\x2f\x08\xa4\xe8\xa0\x20\xce\xb5\xf3\x3f\x9f\x7c\x82\x1c\x11\x5c\xe9\x2c\x83\x65\x5b\xe7\x6a\xba\x29\x8e\xf6\xdd\xa5\x21\xdd\xef\xd6\xfd\x11\xad\x85\xff\xc0\x8c\x56\xd5\x5d\xae\x9f\x7d\x4a\x37\xc0\xfb\x0d\xea\xb2\x94\x47\x0f\xeb\xd6\x98\x3e\xb2\x81\x9b\xaa\x86\xe3\xaa\x6f\x37\x83\xb6\xc7\x28\xa2\x53\xbb\xbb\xef\x98\x9f\xe6\x13\xce\xd0\xc4\x67\x90\x68\x76\x02\xfb\x07\x31\xaa\x2c\xbe\xde\x1b\xd3\x73\x4d\x84\xb1\x40\xd7\x45\xa6\x95\x96\x8a\x42\xb5\xc0\x42\xc7\x6f\x96\xcb\xde\x8d\x9e\x68\xca\x62\xd7\xef\xf3\x4a\xf6\x3c\x6d\x5e\x86\x78\x1c\x20\x28\x9b\xe7\x38\x76\xe4\xf9\xfb\x9d\x17\x6e\x13\x36\xa9\xbd\xf9\x2a\x2d\xe9\xd6\xa0\x02\x7c\xa8\x8e\x6d\xe2\x17\xd1\xd8\x09\x97\x4a\x4a\xf6\x88\x26\x5c\x9c\xc2\xf5\xd7\xf9\x6a\xc0\x9b\xe6\xf4\x6d\xf4\x26\xc0\xbe\x05\x63\x25\xdc\xea\x5b\xc0\x37\x4e\x36\x4a\xaf\x21\x27\x34\x2e\x74\x45\xd0\x0f\x80\xd0\xc0\x34\x36\x47\x55\x23\xcf\xab\xae\x46\x95\xc2\xa2\xb3\x15\x7d\xec\x2b\x12\xd0\xf1\x28\xfc\xd2\x1d\x41\x91\xa1\x79\xa9\xe3\x10\xa3\xff\xbd\xf5\x2a\x3c\x55\xcb\x13\x5e\x36\xee\xdc\xab\x5e\x77\x35\xcf\x56\xe5\x01\xb0\xbf\xda\xc7\xe3\xb6\x75\x2a\xf3\x03\x1d\x8f\x82\x43\xef\x2f\xd2\x71\xf5\xdf\x3b\x1c\xd5\x8b\xfa\x75\xdf\x8a\x44\xa5\x9f\xc3\xc9\x41\xe7\x66\xd9\x75\x7e\x6f\xc3\xfc\x15\x00\x00\xff\xff\x60\x61\xbe\x23\xfc\x12\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 4860, mode: os.FileMode(420), modTime: time.Unix(1760640620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.dinosaurs.yaml": openapiDinosaursYaml,
	"openapi.yaml":           openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.dinosaurs.yaml": &bintree{openapiDinosaursYaml, map[string]*bintree{}},
	"openapi.yaml":           &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
