// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\x1b\xb9\x11\xfe\xae\x5f\x31\x40\x5b\x28\x39\xc8\x92\xd2\xbb\x02\xed\x22\x39\x20\x69\x93\xf6\x0e\xb9\x24\xb5\x93\xb6\x40\x51\xd8\x23\x72\x56\xcb\xcb\x2e\xb9\x21\x67\x6d\x2b\x6d\xff\x7b\x41\x72\x5f\xa5\x95\x22\xa7\xc9\xd9\x77\xc8\x27\x6b\xb9\x33\xc3\x79\xc8\x99\x67\x86\x5c\x9b\x92\x34\x96\x2a\x81\xaf\xe7\xcb\xf9\x72\xa2\x74\x6a\x92\x09\x00\x2b\xce\x29\x81\xd3\xbf\x9c\xbc\x3e\x7d\xfa\x0f\x38\x23\x7b\xa9\x04\xc1\xe3\x57\xdf\x4d\x00\x24\x39\x61\x55\xc9\xca\xe8\x7d\x22\x97\x64\x5d\x78\xbd\x9c\x2f\xe7\x0f\x26\x8e\xac\x1f\xf1\x96\x4f\xa0\xb2\x79\x02\x19\x73\x99\x2c\x16\xb9\x11\x98\x67\xc6\x71\xf2\xfb\xe5\x72\x39\x01\xd8\xb2\x2e\x2a\x6b\x49\x33\x48\x53\xa0\xd2\x43\x75\x97\x2c\x16\x58\xaa\xb9\x87\xe0\x32\x95\xf2\x5c\x98\x62\xd7\xc4\x0f\xa8\x34\xdc\x2b\xad\x91\x95\xf0\x23\xf7\x21\x7a\x33\x6e\xcc\x31\xae\xe9\x43\x26\xcf\x18\xd7\x4a\xaf\x1b\x43\x25\x72\x16\xb0\x79\x0b\x0b\x9b\xb1\xa5\xeb\xc5\xe5\x83\x85\x54\xda\x38\xac\x22\x6e\x80\x35\x71\xfc\x01\xe0\xaa\xa2\x40\xbb\x49\xe0\x94\xb8\xb2\xda\x01\x42\xae\x1c\x83\x49\xa1\x55\x6a\x44\x49\x54\x56\xf1\xa6\x51\xf5\x5e\x3f\x21\xb4\x64\x13\xf8\xe7\xbf\xea\x41\x4b\xae\x34\xda\x91\xeb\xa4\xa6\xbf\x5d\x2e\xa7\xdd\xe3\x16\x82\xc7\xf0\xfd\xd9\xcb\x17\x80\xd6\xe2\xa6\x3f\x2b\x98\xd5\x8f\x24\xd8\xf5\xf4\x84\xd1\x4c\x9a\xfb\xa6\x00\xb0\x2c\x73\x25\xd0\x1b\x5b\xfc\xe8\x8c\x1e\xbe\x05\x70\x22\xa3\x02\xb7\x47\x01\x7e\x6d\x29\x4d\x60\xfa\xab\x85\x30\x45\x69\x34\x69\x76\x8b\x28\xeb\x16\x7f\xaa\x7d\x78\xae\x1c\x4f\x3b\x1c\xdf\x2c\x1f\x1c\xc0\x51\x71\x06\x6c\xde\x92\x06\xe5\x40\xe9\x4b\xcc\x95\xbc\x0d\xe7\x9f\x5a\x6b\xec\xc0\xeb\xaf\xf7\x7b\xfd\x46\x63\xc5\x99\xb1\xea\x3d\x49\x60\x03\x25\xd9\xd4\xd8\x02\x4c\x49\x36\xb8\x75\x17\x10\xfc\xee\x50\xfc\xbc\xd1\x74\x5d\x92\x60\x92\x40\x5e\x0f\x8c\x08\xa9\x7a\xfb\x6b\x5f\xa2\xc5\x82\x98\x6c\x9b\x0b\x27\xa3\xca\x9d\xdc\xa2\xc4\x35\x4d\x8f\x15\x76\xea\xfd\x0d\x84\x09\xad\xc8\x8e\x16\x37\x56\x92\x7d\xb2\x39\x5a\x3e\x55\x94\x4b\x17\xc5\x4b\x4f\xa2\xdb\xf4\xf2\x47\x4b\xc8\x04\x08\x9a\xae\xda\x1c\xbf\x19\xb1\xbc\xab\xc8\xf1\x13\x23\x7b\x72\x83\x48\x68\xb2\x16\x24\x32\xb6\x22\x5e\x4f\x59\x92\x09\xb0\xad\x68\x72\x20\x24\x0e\x07\xc4\x78\x38\x1c\xc3\x22\xd3\x83\xd4\x78\x80\x52\xe2\x9a\xdd\x4a\x20\x6f\xfb\x1e\x78\xe4\x40\x16\xfe\xcd\xb3\x5d\x70\x21\x66\xa1\xbb\x3b\x69\xf8\x85\xb8\x6f\x11\xc1\x1f\xf6\x23\x68\xd3\x15\x73\x4b\x28\x37\x40\xd7\xca\xdd\x4e\xbd\xbf\x51\xc1\x79\xac\xa1\xda\x57\x73\x40\xf8\x94\xf5\x0d\x19\x67\xb4\x4d\x73\xb7\x03\x69\x5f\x27\xb8\xf8\xb7\x92\xff\xdd\xdf\x0e\xfe\x99\x18\x50\x77\xdd\xd8\x6a\x03\x6d\x56\x7c\x9e\x46\xb0\x8d\x87\xd4\x54\x5a\x0e\x26\xfc\x49\x57\x6e\x94\xfa\xbe\xf0\xc7\xed\x20\xf8\x66\x3f\x82\x17\xa6\x8b\xce\x2b\xc5\x19\xb8\x92\x84\x4a\x15\x49\x50\xf2\xe7\x42\x26\x77\xb5\x7b\x2d\x91\x45\xb6\x43\x0a\x6f\x4a\x19\x9a\x38\xfd\x99\x3a\xb8\x68\x5f\x76\xfb\x7a\xc7\x3a\xb9\x57\x7e\x55\x4e\x23\x8c\xc3\x5d\xdd\x31\x3c\x57\xd5\x68\x5d\x25\x04\x39\x97\x56\x79\xbe\xb9\x33\x84\xf7\xa5\xd7\xfb\x89\xbd\xfe\xc2\xd5\x77\x02\xc4\x2f\xb0\x61\xdd\xa9\x31\x81\x78\x7c\x93\x7a\x27\x1a\xd4\xdd\x8b\x92\x0f\xde\x36\x28\x39\x9d\x74\x6f\xbc\x52\x53\x80\xce\xbc\xf5\x86\x8b\xeb\x0a\x54\xbb\xc5\x9b\x92\xe2\x0d\xeb\xa4\xe7\x35\x25\xb0\x0a\x62\xf5\x60\x7c\x78\x66\x6c\x81\x9c\xc0\xf7\x7f\x7f\x3d\x69\xe0\xd5\x46\x5f\x86\x6b\xc9\x53\x4a\xc9\x92\x16\x34\xb4\x1e\xef\x2c\xeb\xa1\xd2\xfa\x04\x65\xd5\x2f\x0d\x4a\xf6\x57\x29\x2a\x39\xb6\x4a\xaf\xdb\xe1\xb7\x4a\x7f\x58\x28\xf3\x0b\x74\x48\xe8\xb9\xea\x2e\x61\x8e\xf4\xed\xa8\x89\x4b\x5c\xd3\xae\x90\xd2\x4c\x6b\xea\xe2\xc8\xa9\xf7\x47\x48\xb1\x61\xcc\x3f\x24\xd6\x56\xfd\x5e\x6b\xe1\x3d\xed\x3d\x7a\x9f\x7a\x8f\x7e\xf2\xde\x63\x98\xa5\xf7\xac\x98\x8a\x98\xb4\x21\x04\x1b\xbb\x98\xe7\x2f\xd3\xc3\x17\x75\x4d\xe8\x6e\x85\x40\x77\x49\x36\xb2\xd0\xe3\x4b\xed\xf3\x4c\xd2\x30\x61\x46\x97\xdb\xe3\xc7\x9d\x8c\xdb\x23\xda\xd6\x83\xf3\x61\x98\x8d\x28\x04\xe8\xfd\x18\xb9\x01\xfc\xfe\xad\xf8\x8d\x30\x87\x95\x1f\x73\x2c\x5c\xfe\x0f\xc6\x47\x44\x8f\xa6\x93\x86\xa7\x6f\x69\x67\x43\x69\xa3\x51\x9c\x3b\x3b\x26\xe2\x0d\xdf\x39\xf2\x51\xe2\x00\x69\x4d\x4c\xbe\x73\x3c\x61\x55\x50\xef\x6d\xdd\x4f\xfe\xbf\xc6\xfa\x1f\x3f\x7e\x29\xd1\x31\x6c\x71\xc7\xda\xf9\x1b\x72\xe5\xc8\x26\x6f\x2d\xf3\x76\x51\xeb\x52\x52\xa3\xaf\x3a\x6d\xdf\xa9\x74\xe2\x8f\x5b\x59\xfd\x38\x28\xdd\xaf\x33\xf2\x0d\x92\x49\xc1\x92\x30\x56\x6e\x73\x62\xff\x24\xb4\x5d\x84\x77\xb6\xbd\x4f\xdd\xd1\x87\x1e\x71\x7a\x2f\xde\x55\x64\x37\x63\x6e\xbc\xc2\x35\x81\xae\x8a\x15\xd9\xce\x97\xf8\x9d\xf0\x2a\x23\x3d\x18\xa0\x6b\x41\x24\x5d\xaf\xc3\xf3\xb3\xf4\x49\x79\xdc\xd1\xed\xe2\x20\x29\xc5\x2a\xe7\x04\x1e\xb4\x43\x85\xd2\xaa\xa8\x8a\x6e\xa8\x5b\x87\x14\x73\x17\xed\xf7\x4b\x4f\x44\xd9\x9b\xfa\x20\xca\x1f\xf0\xda\x9b\xdf\x01\xea\x7c\xcf\x6d\xc3\xe7\xd1\x8f\x44\x50\x7f\x4f\x1e\x60\x58\x1e\xc2\x10\x3e\xd6\x6c\xa1\x08\x63\x7b\x70\x8c\x19\xd9\x42\xf7\x9f\x93\xd6\x87\xb3\x7a\x6b\x5c\xb8\xa5\x8c\x86\x41\x58\xc5\x64\x15\xce\x43\xd0\xb9\x8d\x66\xbc\xf6\x6b\xc0\x99\x72\x5d\x30\x83\x72\xbd\x22\x5f\xa8\x1c\xad\x5f\x1d\xde\x52\x21\x38\xbf\xca\xc8\xd2\x39\x88\x1c\x2b\x47\x7e\x14\x35\x9c\xfd\xf5\x39\x38\x46\xa6\x82\x34\xcf\x5a\x43\x95\x6b\x6e\x4c\x3d\x54\xd7\x98\xf0\x9d\x26\x20\xb3\x55\xab\x8a\xc9\xc1\x02\x84\xc9\xab\x42\x0f\xa5\x50\x08\x53\x69\x9e\x43\x6b\xee\x99\xb1\x40\xd7\x58\x94\x39\xcd\x40\x69\x08\xdf\xb2\xea\x3d\xb4\x8a\x2e\xc9\xd3\x59\x5f\xd7\xc5\x33\x09\x42\xe5\xc8\x7a\xe3\x1d\x44\x46\x1b\x3a\xe5\x20\x70\x51\x6c\x2e\x92\x49\xfb\xf2\xe2\xe2\xc2\xbd\xcb\x7b\x28\xa2\x32\xe4\xea\x2d\xc1\xb4\xd8\xfc\x66\xda\x17\xed\xf4\x5e\xef\x2e\x3a\x08\xd4\x80\xb9\x33\xb0\xa2\xd8\x6d\x93\x04\xe3\x13\x2b\x0f\x57\x04\x96\x9c\xa9\xac\xa0\xf9\x47\x80\x74\xd5\xaa\x0d\x03\x07\x39\xae\x28\xa7\x70\xbd\x7a\x91\x1a\xf3\x68\x85\xf6\x62\xb6\x17\x53\x5f\xf7\x3c\xa8\xba\xf9\x5b\xda\xc0\x23\x98\xa6\xc6\x4c\x01\xb5\x1c\x95\xb9\xc4\xbc\x22\x2f\xb5\x42\xbb\x67\x15\xbe\x8b\xdb\xd7\x8f\x2c\x3d\x65\x4f\xb6\x97\x4a\x92\x9c\x81\xb1\xa0\xa2\x4c\xb4\xa6\x1c\x50\x51\xf2\x66\xe6\xc7\xba\x23\xef\xce\x5e\x72\x86\x1c\x46\xfc\x86\x40\x86\xce\x9f\x97\x0b\xe5\x9c\x32\xda\x2f\x90\x23\x82\x2b\x95\xe7\xb0\xea\xf6\x39\x66\x37\xc9\xf9\xb1\x5c\x5a\x7f\x1f\x1d\xa6\x68\x3d\xf8\x19\x72\x34\xee\xee\x6a\xf3\xc9\xb3\xb4\x31\x7c\x5c\xa2\xae\x2a\xbe\x71\xb2\x6e\xa5\xe9\x0d\x03\xb8\xdd\xd5\xf0\x3a\xc6\x6d\x93\x68\x47\xa4\x22\x3a\x31\x1e\x7d\x2f\xed\xc7\xcd\x09\xe7\xa8\xe5\x39\xa4\xca\x3a\x86\xe3\x9d\x98\x45\x8d\x17\x07\x7d\xfa\x54\x19\xa1\x0d\xd0\xb5\x3f\xb0\x2b\x8e\x10\x22\x81\x85\x88\x6f\xc8\xe5\xe8\x40\x8f\x1f\xf6\x87\x71\x1e\xc7\x3e\x4d\x98\x57\xc1\x1f\x07\x08\xc2\x14\x05\x9e\x38\xf2\xf8\x3d\xe7\x35\xff\x86\x14\x67\xf3\xbb\xb4\xa2\x9d\x44\x05\x78\x16\x5f\x9b\xd4\x13\xd1\x89\x63\x5b\x09\xae\xac\xb7\xa8\x43\xe3\x14\xba\x47\xe7\x77\x03\x1e\xb6\x6f\xbf\x9d\x3f\x0c\x66\xbf\x05\x6d\x38\x1c\x99\x3a\x83\x0f\x1d\x37\x42\x5f\x41\x41\xa8\x5d\x88\x8a\x20\x1f\x0c\x42\x6b\xa6\xd5\x79\x1a\x03\x39\x89\x51\x8d\x22\x83\xb3\x1e\x2b\x7a\xdf\xd7\xc4\xa0\xe4\x2c\x1c\xdc\x67\x50\xe6\xa8\xef\x29\x19\x7c\xf4\x87\xd9\xfb\xe1\x57\x24\x4f\xb8\xd7\x4e\xe7\xee\x0f\xa2\xab\xfd\x6d\x44\x11\x0c\x0e\xa9\xfd\xe4\xa4\x0b\x9d\xa8\xfe\x48\xc9\x59\x98\xd0\xcf\x37\x57\x32\xfe\xf5\x13\xce\x6a\xa2\xfe\x6a\xa8\x45\x2c\xb2\xe7\xe1\xcd\xa3\xc1\x1d\x7b\x37\xf9\xc1\x80\xf9\x5f\x00\x00\x00\xff\xff\x3a\x0f\x67\x83\xc3\x27\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 10179, mode: os.FileMode(420), modTime: time.Unix(1701446764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
