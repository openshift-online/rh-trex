kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: rh-trex-unit-test
spec:
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: 'Namespace where the application is running'
      name: NAMESPACE
      default: "default"
      type: string
    - description: 'Expected output'
      name: EXPECTED_OUTPUT
      default: ""
      type: string
  workspaces:
  - name: cluster-credentials
    optional: true
  tasks:
    - name: unit-test
      description: Set up DB, run unit tests, and read results
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
        - name: EXPECTED_OUTPUT
          value: $(params.EXPECTED_OUTPUT)
      workspaces:
        - name: cluster-credentials
          optional: true
      taskSpec:
        params:
        - name: SNAPSHOT
        - name: NAMESPACE
        - name: EXPECTED_OUTPUT
        results:
        - name: TEST_OUTPUT
          description: Test output
        workspaces:
        - name: cluster-credentials
          workspace: cluster-credentials
        steps:
        - image: registry.redhat.io/openshift4/ose-cli:latest
          env:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
          - name: NAMESPACE
            value: $(params.NAMESPACE)
          - name: EXPECTED_OUTPUT
            value: $(params.EXPECTED_OUTPUT)
          script: |
            # Install Deps
            dnf -y install jq git make golang podman

            go install gotest.tools/gotestsum@latest  

            # Set Vars
            TARGET_COMPONENT_NAME="rh-trex"
            REPO_URL=$(echo $SNAPSHOT | jq -r '.components[] | select(.name == "rh-trex").source.git.url')
            REPO_COMMIT=$(echo $SNAPSHOT | jq -r '.components[] | select(.name == "rh-trex").source.git.revision')
            unit_test_json_output=${PWD}/test_output.json

            # Clone Repo and checkout at snapshot commit
            git clone $REPO_URL $TARGET_COMPONENT_NAME
            cd $TARGET_COMPONENT_NAME
            git checkout $REP_COMMIT

            # Wait for the DB sidecar to be ready
            echo "[INFO] Waiting for database to be ready for connection"
              timeout 5m bash -c 'until echo > /dev/tcp/localhost/5432; do sleep 2s; done'

            # Run unit tests with JSON output
            OCM_ENV=testing gotestsum --jsonfile-timing-events=$(unit_test_json_output) --format short-verbose -- -p 1 -v $(TESTFLAGS) \
              ./pkg/... \
              ./cmd/...

            # Read, process, and write output
            TEST_OUTPUT=$(cat $unit_test_json_output | jq 'select(.Action == "fail")')
            echo -n "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)
        sidecars:
          - image: docker.io/library/postgres:14.2
            name: database-test
            env:
            - name: PGDATA
              value: /work/data
            - name: POSTGRES_DB
              value: ocmexample
            - name: POSTGRES_PASSWORD
              value: foobar-bizz-buzz
            - name: POSTGRES_USER
              value: ocm_example_service
            volumeMounts:
              - mountPath: /work
                name: data
        volumes:
          - name: data
            emptyDir: {}