package mocks

import (
	"context"

	"gorm.io/gorm"

	"github.com/openshift-online/rh-trex/pkg/api"
	"github.com/openshift-online/rh-trex/pkg/dao"
	"github.com/openshift-online/rh-trex/pkg/errors"
)

var _ dao.{{.Kind}}Dao = &{{.KindLowerSingular}}DaoMock{}

type {{.KindLowerSingular}}DaoMock struct {
	{{.KindLowerPlural}} api.{{.Kind}}List
}

func New{{.Kind}}Dao() *{{.KindLowerSingular}}DaoMock {
	return &{{.KindLowerSingular}}DaoMock{}
}

func (d *{{.KindLowerSingular}}DaoMock) Get(ctx context.Context, id string) (*api.{{.Kind}}, error) {
	for _, dino := range d.{{.KindLowerPlural}} {
		if dino.ID == id {
			return dino, nil
		}
	}
	return nil, gorm.ErrRecordNotFound
}

func (d *{{.KindLowerSingular}}DaoMock) Create(ctx context.Context, {{.KindLowerSingular}} *api.{{.Kind}}) (*api.{{.Kind}}, error) {
	d.{{.KindLowerPlural}} = append(d.{{.KindLowerPlural}}, {{.KindLowerSingular}})
	return {{.KindLowerSingular}}, nil
}

func (d *{{.KindLowerSingular}}DaoMock) Replace(ctx context.Context, {{.KindLowerSingular}} *api.{{.Kind}}) (*api.{{.Kind}}, error) {
	return nil, errors.NotImplemented("{{.Kind}}").AsError()
}

func (d *{{.KindLowerSingular}}DaoMock) Delete(ctx context.Context, id string) error {
	return errors.NotImplemented("{{.Kind}}").AsError()
}

func (d *{{.KindLowerSingular}}DaoMock) FindByIDs(ctx context.Context, ids []string) (api.{{.Kind}}List, error) {
	return nil, errors.NotImplemented("{{.Kind}}").AsError()
}

func (d *{{.KindLowerSingular}}DaoMock) All(ctx context.Context) (api.{{.Kind}}List, error) {
	return d.{{.KindLowerPlural}}, nil
}
