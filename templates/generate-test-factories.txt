package factories

import (
	"context"
	"{{.Repo}}/{{.Project}}/cmd/trex/environments"
	"{{.Repo}}/{{.Project}}/pkg/api"
	"{{.Repo}}/{{.Project}}/plugins/{{.KindLowerSingular}}"
)

func (f *Factories) New{{.Kind}}(id string) (*api.{{.Kind}}, error) {
	{{.Kind}}Service := {{.KindLowerSingular}}.{{.Kind}}Service(&environments.Environment().Services)

	{{.Kind}} := &api.{{.Kind}}{
		Meta:       api.Meta{ID: id},
	}

	sub, err := {{.Kind}}Service.Create(context.Background(), {{.Kind}})
	if err != nil {
		return nil, err
	}

	return sub, nil
}

func (f *Factories) New{{.Kind}}List(name string, count int) ([]*api.{{.Kind}}, error) {
	{{.KindPlural}} := []*api.{{.Kind}}{}
	for i := 1; i <= count; i++ {
		c, _ := f.New{{.Kind}}(f.NewID())
		{{.KindPlural}} = append({{.KindPlural}}, c)
	}
	return {{.KindPlural}}, nil
}

// Aliases for test compatibility
func (f *Factories) New{{.KindPlural}}(id string) (*api.{{.Kind}}, error) {
	return f.New{{.Kind}}(id)
}

func (f *Factories) New{{.KindPlural}}List(name string, count int) ([]*api.{{.Kind}}, error) {
	return f.New{{.Kind}}List(name, count)
}
