package dao

import (
	"context"

	"gorm.io/gorm/clause"

	"github.com/openshift-online/rh-trex/pkg/api"
	"github.com/openshift-online/rh-trex/pkg/db"
)

type {{.Kind}}Dao interface {
	Get(ctx context.Context, id string) (*api.{{.Kind}}, error)
	Create(ctx context.Context, {{.KindLowerSingular}} *api.{{.Kind}}) (*api.{{.Kind}}, error)
	Replace(ctx context.Context, {{.KindLowerSingular}} *api.{{.Kind}}) (*api.{{.Kind}}, error)
	Delete(ctx context.Context, id string) error
	FindByIDs(ctx context.Context, ids []string) (api.{{.Kind}}List, error)
	All(ctx context.Context) (api.{{.Kind}}List, error)
}

var _ {{.Kind}}Dao = &sql{{.Kind}}Dao{}

type sql{{.Kind}}Dao struct {
	sessionFactory *db.SessionFactory
}

func New{{.Kind}}Dao(sessionFactory *db.SessionFactory) {{.Kind}}Dao {
	return &sql{{.Kind}}Dao{sessionFactory: sessionFactory}
}

func (d *sql{{.Kind}}Dao) Get(ctx context.Context, id string) (*api.{{.Kind}}, error) {
	g2 := (*d.sessionFactory).New(ctx)
	var {{.KindLowerSingular}} api.{{.Kind}}
	if err := g2.Take(&{{.KindLowerSingular}}, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return &{{.KindLowerSingular}}, nil
}

func (d *sql{{.Kind}}Dao) Create(ctx context.Context, {{.KindLowerSingular}} *api.{{.Kind}}) (*api.{{.Kind}}, error) {
	g2 := (*d.sessionFactory).New(ctx)
	if err := g2.Omit(clause.Associations).Create({{.KindLowerSingular}}).Error; err != nil {
		db.MarkForRollback(ctx, err)
		return nil, err
	}
	return {{.KindLowerSingular}}, nil
}

func (d *sql{{.Kind}}Dao) Replace(ctx context.Context, {{.KindLowerSingular}} *api.{{.Kind}}) (*api.{{.Kind}}, error) {
	g2 := (*d.sessionFactory).New(ctx)
	if err := g2.Omit(clause.Associations).Save({{.KindLowerSingular}}).Error; err != nil {
		db.MarkForRollback(ctx, err)
		return nil, err
	}
	return {{.KindLowerSingular}}, nil
}

func (d *sql{{.Kind}}Dao) Delete(ctx context.Context, id string) error {
	g2 := (*d.sessionFactory).New(ctx)
	if err := g2.Omit(clause.Associations).Delete(&api.{{.Kind}}{Meta: api.Meta{ID: id}}).Error; err != nil {
		db.MarkForRollback(ctx, err)
		return err
	}
	return nil
}

func (d *sql{{.Kind}}Dao) FindByIDs(ctx context.Context, ids []string) (api.{{.Kind}}List, error) {
	g2 := (*d.sessionFactory).New(ctx)
	{{.KindLowerPlural}} := api.{{.Kind}}List{}
	if err := g2.Where("id in (?)", ids).Find(&{{.KindLowerPlural}}).Error; err != nil {
		return nil, err
	}
	return {{.KindLowerPlural}}, nil
}

func (d *sql{{.Kind}}Dao) All(ctx context.Context) (api.{{.Kind}}List, error) {
	g2 := (*d.sessionFactory).New(ctx)
	{{.KindLowerPlural}} := api.{{.Kind}}List{}
	if err := g2.Find(&{{.KindLowerPlural}}).Error; err != nil {
		return nil, err
	}
	return {{.KindLowerPlural}}, nil
}
