package integration

import (
	"context"
	"fmt"
	"net/http"
	"testing"

	. "github.com/onsi/gomega"
	"gopkg.in/resty.v1"

	"{{.Repo}}/{{.Project}}/pkg/api/openapi"
	"{{.Repo}}/{{.Project}}/test"
)

func Test{{.Kind}}Get(t *testing.T) {
	h, client := test.RegisterIntegration(t)

	account := h.NewRandAccount()
	ctx := h.NewAuthenticatedContext(account)

	// 401 using no JWT token
	_, _, err := client.DefaultApi.Api{{.ProjectCamelCase}}V1{{.KindPlural}}IdGet(context.Background(), "foo").Execute()
	Expect(err).To(HaveOccurred(), "Expected 401 but got nil error")

	// GET responses per openapi spec: 200 and 404,
	_, resp, err := client.DefaultApi.Api{{.ProjectCamelCase}}V1{{.KindPlural}}IdGet(ctx, "foo").Execute()
	Expect(err).To(HaveOccurred(), "Expected 404")
	Expect(resp.StatusCode).To(Equal(http.StatusNotFound))

	{{.KindLowerSingular}}Model, err := h.Factories.New{{.KindPlural}}(h.NewID())
    Expect(err).NotTo(HaveOccurred())

	{{.KindLowerSingular}}Output, resp, err := client.DefaultApi.Api{{.ProjectCamelCase}}V1{{.KindPlural}}IdGet(ctx, {{.KindLowerSingular}}Model.ID).Execute()
	Expect(err).NotTo(HaveOccurred())
	Expect(resp.StatusCode).To(Equal(http.StatusOK))

	Expect(*{{.KindLowerSingular}}Output.Id).To(Equal({{.KindLowerSingular}}Model.ID), "found object does not match test object")
	Expect(*{{.KindLowerSingular}}Output.Kind).To(Equal("{{.Kind}}"))
	Expect(*{{.KindLowerSingular}}Output.Href).To(Equal(fmt.Sprintf("/api/{{.Project}}/v1/{{.KindSnakeCasePlural}}/%s", {{.KindLowerSingular}}Model.ID)))
	Expect(*{{.KindLowerSingular}}Output.CreatedAt).To(BeTemporally("~", {{.KindLowerSingular}}Model.CreatedAt))
	Expect(*{{.KindLowerSingular}}Output.UpdatedAt).To(BeTemporally("~", {{.KindLowerSingular}}Model.UpdatedAt))
}

func Test{{.Kind}}Post(t *testing.T) {
	h, client := test.RegisterIntegration(t)

	account := h.NewRandAccount()
	ctx := h.NewAuthenticatedContext(account)

	// POST responses per openapi spec: 201, 409, 500
	{{.KindLowerSingular}}Input := openapi.{{.Kind}}{

	}

	// 201 Created
	{{.KindLowerSingular}}Output, resp, err := client.DefaultApi.Api{{.ProjectCamelCase}}V1{{.KindPlural}}Post(ctx).{{.Kind}}({{.KindLowerSingular}}Input).Execute()
	Expect(err).NotTo(HaveOccurred(), "Error posting object:  %v", err)
	Expect(resp.StatusCode).To(Equal(http.StatusCreated))
	Expect(*{{.KindLowerSingular}}Output.Id).NotTo(BeEmpty(), "Expected ID assigned on creation")
	Expect(*{{.KindLowerSingular}}Output.Kind).To(Equal("{{.Kind}}"))
	Expect(*{{.KindLowerSingular}}Output.Href).To(Equal(fmt.Sprintf("/api/{{.Project}}/v1/{{.KindSnakeCasePlural}}/%s", *{{.KindLowerSingular}}Output.Id)))

	// 400 bad request. posting junk json is one way to trigger 400.
	jwtToken := ctx.Value(openapi.ContextAccessToken)
	restyResp, err := resty.R().
		SetHeader("Content-Type", "application/json").
		SetHeader("Authorization", fmt.Sprintf("Bearer %s", jwtToken)).
		SetBody(`{ this is invalid }`).
		Post(h.RestURL("/{{.KindSnakeCasePlural}}"))

	Expect(restyResp.StatusCode()).To(Equal(http.StatusBadRequest))
}

func Test{{.Kind}}Patch(t *testing.T) {
	h, client := test.RegisterIntegration(t)

	account := h.NewRandAccount()
	ctx := h.NewAuthenticatedContext(account)

	// POST responses per openapi spec: 201, 409, 500

	{{.KindLowerSingular}}Model, err := h.Factories.New{{.KindPlural}}(h.NewID())
    Expect(err).NotTo(HaveOccurred())

	// 200 OK
	{{.KindLowerSingular}}Output, resp, err := client.DefaultApi.Api{{.ProjectCamelCase}}V1{{.KindPlural}}IdPatch(ctx, {{.KindLowerSingular}}Model.ID).{{.Kind}}PatchRequest(openapi.{{.Kind}}PatchRequest{}).Execute()
	Expect(err).NotTo(HaveOccurred(), "Error posting object:  %v", err)
	Expect(resp.StatusCode).To(Equal(http.StatusOK))
	Expect(*{{.KindLowerSingular}}Output.Id).To(Equal({{.KindLowerSingular}}Model.ID))
	Expect(*{{.KindLowerSingular}}Output.CreatedAt).To(BeTemporally("~", {{.KindLowerSingular}}Model.CreatedAt))
	Expect(*{{.KindLowerSingular}}Output.Kind).To(Equal("{{.Kind}}"))
	Expect(*{{.KindLowerSingular}}Output.Href).To(Equal(fmt.Sprintf("/api/{{.Project}}/v1/{{.KindSnakeCasePlural}}/%s", *{{.KindLowerSingular}}Output.Id)))

	jwtToken := ctx.Value(openapi.ContextAccessToken)
	// 500 server error. posting junk json is one way to trigger 500.
	restyResp, err := resty.R().
		SetHeader("Content-Type", "application/json").
		SetHeader("Authorization", fmt.Sprintf("Bearer %s", jwtToken)).
		SetBody(`{ this is invalid }`).
		Patch(h.RestURL("/{{.KindSnakeCasePlural}}/foo"))

	Expect(restyResp.StatusCode()).To(Equal(http.StatusBadRequest))
}

func Test{{.Kind}}Paging(t *testing.T) {
	h, client := test.RegisterIntegration(t)

	account := h.NewRandAccount()
	ctx := h.NewAuthenticatedContext(account)

	// Paging
	_, err := h.Factories.New{{.KindPlural}}List("Bronto", 20)
    Expect(err).NotTo(HaveOccurred())

	list, _, err := client.DefaultApi.Api{{.ProjectCamelCase}}V1{{.KindPlural}}Get(ctx).Execute()
	Expect(err).NotTo(HaveOccurred(), "Error getting {{.KindLowerSingular}} list: %v", err)
	Expect(len(list.Items)).To(Equal(20))
	Expect(list.Size).To(Equal(int32(20)))
	Expect(list.Total).To(Equal(int32(20)))
	Expect(list.Page).To(Equal(int32(1)))

	list, _, err = client.DefaultApi.Api{{.ProjectCamelCase}}V1{{.KindPlural}}Get(ctx).Page(2).Size(5).Execute()
	Expect(err).NotTo(HaveOccurred(), "Error getting {{.KindLowerSingular}} list: %v", err)
	Expect(len(list.Items)).To(Equal(5))
	Expect(list.Size).To(Equal(int32(5)))
	Expect(list.Total).To(Equal(int32(20)))
	Expect(list.Page).To(Equal(int32(2)))
}

func Test{{.Kind}}ListSearch(t *testing.T) {
	h, client := test.RegisterIntegration(t)

	account := h.NewRandAccount()
	ctx := h.NewAuthenticatedContext(account)

	{{.KindLowerPlural}}, _ := h.Factories.New{{.KindPlural}}List("bronto", 20)

	search := fmt.Sprintf("id in ('%s')", {{.KindLowerPlural}}[0].ID)
	list, _, err := client.DefaultApi.Api{{.ProjectCamelCase}}V1{{.KindPlural}}Get(ctx).Search(search).Execute()
	Expect(err).NotTo(HaveOccurred(), "Error getting {{.KindLowerSingular}} list: %v", err)
	Expect(len(list.Items)).To(Equal(1))
	Expect(list.Total).To(Equal(int32(1)))
	Expect(*list.Items[0].Id).To(Equal({{.KindLowerPlural}}[0].ID))
}
